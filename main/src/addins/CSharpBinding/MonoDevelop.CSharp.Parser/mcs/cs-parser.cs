// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
		
		ModuleContainer module;
		
		CompilerContext compiler;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 9;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declarations opt_EOF",
//t    "compilation_unit : outer_declarations global_attributes opt_EOF",
//t    "compilation_unit : global_attributes opt_EOF",
//t    "compilation_unit : opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "outer_declarations : outer_declaration",
//t    "outer_declarations : outer_declarations outer_declaration",
//t    "outer_declaration : extern_alias_directive",
//t    "outer_declaration : using_directive",
//t    "outer_declaration : namespace_member_declaration",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "$$3 :",
//t    "namespace_body : OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_member_declarations :",
//t    "opt_namespace_member_declarations : namespace_member_declarations",
//t    "namespace_member_declarations : namespace_member_declaration",
//t    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
//t    "namespace_member_declaration : type_declaration",
//t    "namespace_member_declaration : namespace_declaration",
//t    "namespace_member_declaration : error",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "global_attributes : attribute_sections",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target_specifier : attribute_target COLON",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$4 :",
//t    "attribute : attribute_name $$4 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$5 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$5 expression",
//t    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "$$9 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$6 type_declaration_name $$7 opt_class_base opt_type_parameter_constraints_clauses $$8 struct_body $$9 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$10 :",
//t    "struct_body : OPEN_BRACE $$10 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "$$11 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$11 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$12 :",
//t    "constant_initializer : ASSIGN $$12 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$13 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$13 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$14 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$14 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$15 :",
//t    "opt_field_initializer : ASSIGN $$15 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$16 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$16 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$17 :",
//t    "fixed_field_size : OPEN_BRACKET $$17 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$18 :",
//t    "method_declaration : method_header $$18 method_body",
//t    "$$19 :",
//t    "$$20 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$19 opt_formal_parameter_list CLOSE_PARENS $$20 opt_type_parameter_constraints_clauses",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$23 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$23 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$24 :",
//t    "$$25 :",
//t    "$$26 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$24 OPEN_BRACE $$25 accessor_declarations $$26 CLOSE_BRACE",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$27 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$30 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$30 accessor_body",
//t    "$$31 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$31 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$32 :",
//t    "$$33 :",
//t    "$$34 :",
//t    "$$35 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$32 type_declaration_name $$33 opt_class_base opt_type_parameter_constraints_clauses $$34 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$35 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$36 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$36 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$37 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$37 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$38 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$38 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$39 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$40 :",
//t    "$$41 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$40 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$41 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$42 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$42 opt_argument_list CLOSE_PARENS",
//t    "$$43 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$43 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : error",
//t    "$$44 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$44 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$45 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$45 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$46 :",
//t    "$$47 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$46 event_accessor_declarations $$47 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$48 :",
//t    "opt_event_initializer : ASSIGN $$48 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$49 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$49 event_variable_initializer",
//t    "$$50 :",
//t    "event_variable_initializer : $$50 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$51 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$51 event_accessor_block",
//t    "$$52 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$52 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$53 :",
//t    "$$54 :",
//t    "$$55 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$53 OPEN_BRACE $$54 opt_enum_member_declarations $$55 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$56 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$56 ASSIGN constant_expression",
//t    "$$57 :",
//t    "$$58 :",
//t    "$$59 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$57 opt_formal_parameter_list CLOSE_PARENS $$58 opt_type_parameter_constraints_clauses $$59 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$60 :",
//t    "type_declaration_name : IDENTIFIER $$60 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifiers array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$61 :",
//t    "new_expr_type : $$61 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$62 :",
//t    "typeof_expression : TYPEOF $$62 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
//t    "$$63 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$63 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$64 :",
//t    "anonymous_method_signature : OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
//t    "lambda_parameter : parameter_type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$65 :",
//t    "lambda_expression_body_simple : $$65 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$66 :",
//t    "lambda_expression : IDENTIFIER ARROW $$66 lambda_expression_body",
//t    "$$67 :",
//t    "$$68 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$67 opt_lambda_parameter_list CLOSE_PARENS ARROW $$68 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$69 :",
//t    "$$70 :",
//t    "$$71 :",
//t    "$$72 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$69 type_declaration_name $$70 opt_class_base opt_type_parameter_constraints_clauses $$71 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$72 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$73 :",
//t    "block : OPEN_BRACE $$73 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$74 :",
//t    "block_prepared : OPEN_BRACE $$74 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$75 :",
//t    "labeled_statement : IDENTIFIER COLON $$75 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "$$76 :",
//t    "block_variable_declaration : variable_type IDENTIFIER $$76 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$77 :",
//t    "block_variable_declaration : CONST variable_type IDENTIFIER $$77 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA IDENTIFIER",
//t    "variable_declarator : COMMA IDENTIFIER ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA IDENTIFIER ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$78 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$78 opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$79 :",
//t    "switch_section : switch_labels $$79 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$80 :",
//t    "for_statement : FOR open_parens_any $$80 for_statement_cont",
//t    "for_statement_cont : opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_cont : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$81 :",
//t    "for_initializer : variable_type IDENTIFIER $$81 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$82 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$82 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "catch_clause : CATCH block",
//t    "$$83 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$83 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$84 :",
//t    "unsafe_statement : UNSAFE $$84 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$85 :",
//t    "$$86 :",
//t    "fixed_statement : FIXED open_parens_any variable_type IDENTIFIER $$85 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$86 embedded_statement",
//t    "$$87 :",
//t    "$$88 :",
//t    "using_statement : USING open_parens_any variable_type IDENTIFIER $$87 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$88 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
//t    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
//t    "nested_from_clause : FROM IDENTIFIER IN expression",
//t    "nested_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$89 :",
//t    "from_clause : FROM IDENTIFIER IN $$89 expression",
//t    "$$90 :",
//t    "from_clause : FROM type IDENTIFIER IN $$90 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "$$91 :",
//t    "select_or_group_clause : SELECT $$91 expression",
//t    "$$92 :",
//t    "$$93 :",
//t    "select_or_group_clause : GROUP $$92 expression $$93 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$94 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$94 expression",
//t    "$$95 :",
//t    "where_clause : WHERE $$95 boolean_expression",
//t    "$$96 :",
//t    "$$97 :",
//t    "$$98 :",
//t    "join_clause : JOIN IDENTIFIER IN $$96 expression ON $$97 expression EQUALS $$98 expression opt_join_into",
//t    "$$99 :",
//t    "$$100 :",
//t    "$$101 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$99 expression ON $$100 expression EQUALS $$101 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$102 :",
//t    "orderby_clause : ORDERBY $$102 orderings",
//t    "orderings : order_by",
//t    "$$103 :",
//t    "orderings : order_by COMMA $$103 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$104 :",
//t    "orderings_then_by : orderings_then_by COMMA $$104 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$105 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$105 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$106 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$106 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "$$107 :",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$107 interactive_compilation_unit",
//t    "interactive_compilation_unit : outer_declarations",
//t    "interactive_compilation_unit : outer_declarations global_attributes",
//t    "interactive_compilation_unit : global_attributes",
//t    "interactive_compilation_unit :",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","ASYNC","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 377 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 384 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 388 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
  case_16();
  break;
case 17:
#line 424 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
#line 549 "cs-parser.jay"
  {
		ubag.CloseNamespace (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 45:
  case_45();
  break;
case 46:
#line 587 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
#line 591 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	 }
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
#line 706 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 59:
#line 710 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 62:
#line 727 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 63:
#line 728 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 64:
  case_64();
  break;
case 65:
#line 740 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 66:
  case_66();
  break;
case 67:
#line 754 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 68:
  case_68();
  break;
case 69:
#line 779 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 70:
#line 783 "cs-parser.jay"
  { yyVal = null; }
  break;
case 71:
#line 787 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 72:
#line 792 "cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
  case_73();
  break;
case 74:
  case_74();
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
#line 836 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 79:
#line 844 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 80:
  case_80();
  break;
case 81:
  case_81();
  break;
case 82:
#line 868 "cs-parser.jay"
  { yyVal = null; }
  break;
case 83:
#line 872 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 84:
#line 876 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 99:
  case_99();
  break;
case 100:
#line 917 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
  case_103();
  break;
case 104:
  case_104();
  break;
case 105:
#line 949 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 106:
  case_106();
  break;
case 107:
#line 961 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 122:
  case_122();
  break;
case 123:
  case_123();
  break;
case 126:
#line 1030 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
#line 1034 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 128:
  case_128();
  break;
case 129:
#line 1050 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 130:
  case_130();
  break;
case 131:
  case_131();
  break;
case 134:
  case_134();
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 138:
#line 1128 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 140:
  case_140();
  break;
case 141:
  case_141();
  break;
case 144:
#line 1158 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 145:
#line 1162 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 146:
  case_146();
  break;
case 147:
#line 1175 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 148:
  case_148();
  break;
case 151:
#line 1194 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 152:
#line 1198 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 153:
  case_153();
  break;
case 154:
#line 1214 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 155:
  case_155();
  break;
case 156:
  case_156();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
#line 1268 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 163:
#line 1272 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 164:
  case_164();
  break;
case 165:
#line 1313 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 166:
#line 1317 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 170:
#line 1393 "cs-parser.jay"
  { yyVal = null; }
  break;
case 171:
#line 1397 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
#line 1456 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 181:
#line 1460 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
#line 1535 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 189:
  case_189();
  break;
case 190:
#line 1576 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
#line 1674 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
#line 1727 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 209:
  case_209();
  break;
case 210:
#line 1757 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
	  }
  break;
case 211:
  case_211();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
#line 1899 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 225:
  case_225();
  break;
case 226:
  case_226();
  break;
case 227:
  case_227();
  break;
case 228:
  case_228();
  break;
case 229:
#line 1932 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 234:
#line 1949 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 235:
#line 1953 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 240:
#line 1961 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 241:
#line 1965 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 242:
#line 1969 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 243:
#line 1975 "cs-parser.jay"
  {
	  }
  break;
case 244:
  case_244();
  break;
case 246:
#line 2002 "cs-parser.jay"
  { yyVal = null; }
  break;
case 248:
  case_248();
  break;
case 249:
#line 2018 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 250:
  case_250();
  break;
case 252:
#line 2064 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 253:
#line 2065 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 254:
#line 2066 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 255:
#line 2067 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 256:
#line 2068 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 257:
#line 2069 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 258:
#line 2071 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 259:
#line 2072 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 260:
#line 2074 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 261:
#line 2075 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 262:
#line 2076 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 263:
#line 2077 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 264:
#line 2078 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 265:
#line 2079 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 266:
#line 2080 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 267:
#line 2081 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 268:
#line 2082 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 269:
#line 2083 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 270:
#line 2084 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 271:
#line 2085 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 272:
#line 2086 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 273:
#line 2087 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 274:
#line 2094 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 275:
  case_275();
  break;
case 276:
#line 2113 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 285:
#line 2216 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 288:
#line 2228 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 289:
  case_289();
  break;
case 290:
#line 2238 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 301:
#line 2347 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 302:
  case_302();
  break;
case 305:
#line 2364 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 306:
#line 2368 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 307:
  case_307();
  break;
case 308:
#line 2381 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
#line 2406 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 314:
  case_314();
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 328:
  case_328();
  break;
case 329:
  case_329();
  break;
case 332:
#line 2565 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
#line 2623 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 339:
  case_339();
  break;
case 340:
#line 2649 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 341:
  case_341();
  break;
case 343:
  case_343();
  break;
case 345:
  case_345();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
#line 2746 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 355:
  case_355();
  break;
case 356:
  case_356();
  break;
case 358:
  case_358();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 369:
  case_369();
  break;
case 371:
#line 2866 "cs-parser.jay"
  {
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 372:
#line 2873 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 374:
  case_374();
  break;
case 376:
  case_376();
  break;
case 378:
  case_378();
  break;
case 380:
#line 2911 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 381:
  case_381();
  break;
case 382:
#line 2931 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
  case_383();
  break;
case 384:
#line 2940 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 385:
#line 2944 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 386:
  case_386();
  break;
case 387:
  case_387();
  break;
case 388:
  case_388();
  break;
case 389:
  case_389();
  break;
case 390:
#line 2982 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.object_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 391:
#line 2983 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.string_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 392:
#line 2984 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.bool_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 393:
#line 2985 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.decimal_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 394:
#line 2986 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.float_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 395:
#line 2987 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.double_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 397:
#line 2992 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.sbyte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 398:
#line 2993 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.byte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
#line 2994 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.short_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
#line 2995 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.ushort_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 401:
#line 2996 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
#line 2997 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
#line 2998 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 2999 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3000 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.char_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 425:
  case_425();
  break;
case 426:
  case_426();
  break;
case 430:
#line 3046 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 431:
#line 3050 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); }
  break;
case 432:
#line 3051 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop])); }
  break;
case 437:
  case_437();
  break;
case 438:
#line 3084 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
#line 3115 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 444:
  case_444();
  break;
case 445:
#line 3123 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 446:
  case_446();
  break;
case 447:
  case_447();
  break;
case 448:
#line 3139 "cs-parser.jay"
  { yyVal = null; }
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
#line 3162 "cs-parser.jay"
  { yyVal = null; }
  break;
case 453:
#line 3166 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
  case_457();
  break;
case 458:
#line 3198 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 464:
#line 3226 "cs-parser.jay"
  { yyVal = null; }
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
#line 3278 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
#line 3365 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 488:
#line 3373 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 491:
#line 3393 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 492:
#line 3400 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
#line 3466 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 505:
#line 3495 "cs-parser.jay"
  { yyVal = null; }
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
#line 3571 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 520:
#line 3575 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 521:
#line 3582 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 522:
#line 3586 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
#line 3630 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 528:
  case_528();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
#line 3745 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 544:
#line 3749 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 545:
#line 3756 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 547:
#line 3764 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 551:
#line 3788 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
#line 3792 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 554:
  case_554();
  break;
case 556:
#line 3813 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 3817 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 558:
#line 3821 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3825 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3829 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3833 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 567:
  case_567();
  break;
case 568:
#line 3865 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
  case_569();
  break;
case 570:
#line 3874 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 3878 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 588:
  case_588();
  break;
case 590:
  case_590();
  break;
case 592:
  case_592();
  break;
case 594:
  case_594();
  break;
case 596:
  case_596();
  break;
case 597:
#line 4002 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
#line 4097 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 614:
  case_614();
  break;
case 617:
#line 4112 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 618:
  case_618();
  break;
case 620:
  case_620();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 631:
#line 4173 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 633:
#line 4184 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 634:
#line 4197 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
#line 4231 "cs-parser.jay"
  { yyVal = null; }
  break;
case 640:
#line 4233 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 641:
  case_641();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 661:
#line 4353 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 663:
#line 4361 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
#line 4445 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 672:
#line 4449 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 673:
#line 4456 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 674:
  case_674();
  break;
case 675:
#line 4472 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 676:
#line 4476 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 677:
  case_677();
  break;
case 678:
#line 4501 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 687:
#line 4545 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 688:
#line 4549 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 690:
  case_690();
  break;
case 693:
#line 4573 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 694:
#line 4577 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 730:
  case_730();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
#line 4721 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 735:
#line 4725 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 736:
  case_736();
  break;
case 738:
  case_738();
  break;
case 739:
#line 4746 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 751:
  case_751();
  break;
case 752:
  case_752();
  break;
case 753:
#line 4831 "cs-parser.jay"
  {
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 754:
#line 4835 "cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 759:
  case_759();
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
#line 4880 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 765:
#line 4884 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 766:
#line 4885 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 767:
  case_767();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
#line 4953 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
#line 4997 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 782:
#line 5001 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
#line 5030 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
#line 5069 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
#line 5097 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 799:
  case_799();
  break;
case 800:
  case_800();
  break;
case 802:
#line 5118 "cs-parser.jay"
  { yyVal = null; }
  break;
case 804:
#line 5123 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 808:
  case_808();
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 818:
  case_818();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 829:
#line 5278 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 837:
#line 5331 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 838:
  case_838();
  break;
case 839:
#line 5350 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 840:
  case_840();
  break;
case 841:
#line 5368 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 842:
#line 5375 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 843:
  case_843();
  break;
case 844:
#line 5385 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
#line 5468 "cs-parser.jay"
  {
		Report.Error (210, lexer.Location, "You must provide an initializer in a fixed or using statement declaration");
	  }
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
#line 5568 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 864:
  case_864();
  break;
case 865:
#line 5583 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 869:
#line 5623 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 877:
  case_877();
  break;
case 883:
#line 5681 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 884:
  case_884();
  break;
case 885:
#line 5699 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 896:
#line 5841 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 897:
#line 5848 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 898:
  case_898();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
#line 5894 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 906:
#line 5898 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 907:
#line 5902 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 908:
#line 5909 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 909:
#line 5913 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 910:
#line 5917 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
#line 6009 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_16()
#line 409 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }

void case_20()
#line 434 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_21()
#line 439 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_22()
#line 447 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_23()
#line 453 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_24()
#line 461 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_25()
#line 474 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (module,
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_26()
#line 488 "cs-parser.jay"
{ 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.EndNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_27()
#line 498 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
#line 503 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
#line 508 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_34()
#line 526 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_35()
#line 538 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
			
	  }

void case_45()
#line 574 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];
			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_53()
#line 615 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				module.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 632 "cs-parser.jay"
{
		global_attrs_enabled = false;
		yyVal = null;
      }

void case_55()
#line 637 "cs-parser.jay"
{ 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_56()
#line 646 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (!string.IsNullOrEmpty (current_attr_target)) {
					module.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_57()
#line 673 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (!string.IsNullOrEmpty (current_attr_target)) {
					module.AddAttributes (sect);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_60()
#line 715 "cs-parser.jay"
{
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_61()
#line 723 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_64()
#line 730 "cs-parser.jay"
{
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }

void case_66()
#line 742 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_68()
#line 756 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
	  }

void case_73()
#line 794 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_74()
#line 800 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_75()
#line 806 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_76()
#line 821 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }

void case_80()
#line 846 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }

void case_81()
#line 855 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }

void case_99()
#line 902 "cs-parser.jay"
{
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_101()
#line 919 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_102()
#line 925 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));
	  }

void case_103()
#line 936 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_104()
#line 942 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_106()
#line 954 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_122()
#line 996 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			Report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_123()
#line 1009 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_128()
#line 1039 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_130()
#line 1052 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_131()
#line 1057 "cs-parser.jay"
{
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_134()
#line 1072 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type == TypeManager.void_type)
			Report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_135()
#line 1087 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_136()
#line 1100 "cs-parser.jay"
{ 
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_137()
#line 1111 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[-6+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_140()
#line 1134 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_141()
#line 1140 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_146()
#line 1167 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_148()
#line 1177 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_153()
#line 1203 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_155()
#line 1216 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_156()
#line 1222 "cs-parser.jay"
{
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_159()
#line 1232 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_160()
#line 1240 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_161()
#line 1245 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_164()
#line 1274 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_167()
#line 1319 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		/* TODO: lbag, push void*/
		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-8+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_168()
#line 1374 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_173()
#line 1403 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, lbag.GetLocations (pars_list));
	  }

void case_174()
#line 1409 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_175()
#line 1416 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_176()
#line 1422 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_177()
#line 1429 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_178()
#line 1439 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_179()
#line 1445 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_182()
#line 1462 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_183()
#line 1470 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_184()
#line 1479 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AppendTo (pars, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_185()
#line 1503 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_186()
#line 1512 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_187()
#line 1522 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_189()
#line 1537 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (RootContext.Version <= LanguageVersion.V_3) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = (Expression) yyVals[0+yyTop];
	  }

void case_192()
#line 1582 "cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_193()
#line 1587 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_194()
#line 1611 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_195()
#line 1618 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_196()
#line 1625 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_197()
#line 1638 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_198()
#line 1643 "cs-parser.jay"
{
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_199()
#line 1650 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_200()
#line 1658 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_201()
#line 1663 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_203()
#line 1679 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_204()
#line 1690 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_205()
#line 1695 "cs-parser.jay"
{
		current_property = new Property (current_class, (FullNamedExpression) yyVals[-3+yyTop], (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (current_property.TypeExpression.Type == TypeManager.void_type)
			Report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_206()
#line 1708 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_207()
#line 1715 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_209()
#line 1729 "cs-parser.jay"
{
		valid_param_mod = 0;
	  
		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-6+yyTop],
			(MemberName)yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (indexer.TypeExpression.Type == TypeManager.void_type)
			Report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.Parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_211()
#line 1759 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_216()
#line 1775 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		Report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_217()
#line 1789 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_218()
#line 1811 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_219()
#line 1832 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_220()
#line 1859 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_222()
#line 1881 "cs-parser.jay"
{
		lbag.AppendToMember (lbag.LastMember, GetLocation (yyVals[0+yyTop]));
	  	yyVal = null;
	  }

void case_223()
#line 1886 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_225()
#line 1901 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_226()
#line 1908 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_227()
#line 1919 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_228()
#line 1925 "cs-parser.jay"
{
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_244()
#line 1977 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

			if (RootContext.Documentation != null) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_248()
#line 2008 "cs-parser.jay"
{
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_250()
#line 2020 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_275()
#line 2096 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_277()
#line 2115 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_278()
#line 2130 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_279()
#line 2136 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_280()
#line 2146 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_281()
#line 2165 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_282()
#line 2174 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_283()
#line 2185 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_289()
#line 2230 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_291()
#line 2240 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_292()
#line 2246 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_293()
#line 2254 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_294()
#line 2263 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (RootContext.Documentation != null)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_295()
#line 2288 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			Report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_296()
#line 2302 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_297()
#line 2315 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_298()
#line 2323 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			Report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_299()
#line 2330 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_302()
#line 2349 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_307()
#line 2373 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_309()
#line 2383 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_310()
#line 2392 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			Report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_314()
#line 2413 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_315()
#line 2418 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_316()
#line 2423 "cs-parser.jay"
{ 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_317()
#line 2431 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_318()
#line 2443 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_319()
#line 2459 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_320()
#line 2471 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_321()
#line 2487 "cs-parser.jay"
{
		Report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_323()
#line 2499 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_324()
#line 2504 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_325()
#line 2516 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_326()
#line 2522 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (RootContext.Documentation != null)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_328()
#line 2539 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null ||
			(te.Type != TypeManager.int32_type && te.Type != TypeManager.uint32_type &&
			te.Type != TypeManager.int64_type && te.Type != TypeManager.uint64_type &&
			te.Type != TypeManager.short_type && te.Type != TypeManager.ushort_type &&
			te.Type != TypeManager.byte_type && te.Type != TypeManager.sbyte_type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_329()
#line 2553 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_334()
#line 2571 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_335()
#line 2579 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (RootContext.Documentation != null) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_336()
#line 2592 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_337()
#line 2600 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (RootContext.Documentation != null)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_339()
#line 2625 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		ubag.PushTypeDeclaration (del);
		ubag.PopTypeDeclaration ();

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_341()
#line 2651 "cs-parser.jay"
{
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_343()
#line 2664 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "nullable types");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_345()
#line 2677 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_347()
#line 2688 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_348()
#line 2697 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_350()
#line 2709 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_351()
#line 2718 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_352()
#line 2726 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_353()
#line 2732 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_355()
#line 2748 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_356()
#line 2757 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_358()
#line 2768 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_359()
#line 2777 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_360()
#line 2782 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_361()
#line 2790 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_362()
#line 2796 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_363()
#line 2804 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_365()
#line 2814 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_366()
#line 2827 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_367()
#line 2833 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_368()
#line 2843 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }

void case_369()
#line 2848 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_374()
#line 2882 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_376()
#line 2891 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_378()
#line 2900 "cs-parser.jay"
{
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_381()
#line 2916 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_383()
#line 2933 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_386()
#line 2949 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_387()
#line 2955 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_388()
#line 2964 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_389()
#line 2971 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_425()
#line 3032 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_426()
#line 3036 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_437()
#line 3077 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_439()
#line 3089 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_440()
#line 3095 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_441()
#line 3101 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_442()
#line 3107 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_444()
#line 3116 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_446()
#line 3124 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_447()
#line 3132 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_450()
#line 3145 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_451()
#line 3155 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_454()
#line 3171 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_455()
#line 3177 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_456()
#line 3182 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_457()
#line 3190 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_459()
#line 3199 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_460()
#line 3207 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_461()
#line 3214 "cs-parser.jay"
{
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_466()
#line 3232 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_467()
#line 3238 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_468()
#line 3248 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_469()
#line 3263 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_470()
#line 3268 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_475()
#line 3289 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_476()
#line 3294 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_477()
#line 3299 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_478()
#line 3304 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_480()
#line 3316 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_481()
#line 3324 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_482()
#line 3330 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_483()
#line 3336 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_484()
#line 3344 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_485()
#line 3350 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_489()
#line 3378 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_490()
#line 3383 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_493()
#line 3405 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_494()
#line 3418 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_495()
#line 3430 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_496()
#line 3438 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_497()
#line 3445 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_498()
#line 3452 "cs-parser.jay"
{
		Report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_499()
#line 3457 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_501()
#line 3468 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_502()
#line 3476 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-3+yyTop]), "anonymous types");
	  	else if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_507()
#line 3501 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_508()
#line 3507 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_509()
#line 3516 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_510()
#line 3522 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_511()
#line 3528 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_512()
#line 3533 "cs-parser.jay"
{
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_516()
#line 3548 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_517()
#line 3556 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_518()
#line 3561 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_523()
#line 3591 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_524()
#line 3598 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_525()
#line 3612 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_526()
#line 3618 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_528()
#line 3632 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_531()
#line 3643 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_532()
#line 3651 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_533()
#line 3657 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }

void case_534()
#line 3664 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_535()
#line 3670 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_536()
#line 3676 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_537()
#line 3688 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_538()
#line 3700 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_539()
#line 3711 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
#line 3719 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_541()
#line 3727 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 3735 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop])), lt.Value, lt.Location);
	  }

void case_548()
#line 3766 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_549()
#line 3774 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_554()
#line 3798 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 3839 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 3844 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 3849 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 3858 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 3867 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_573()
#line 3884 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 3889 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 3898 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 3903 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 3908 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 3913 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 3922 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 3927 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3936 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3945 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 3954 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 3963 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 3972 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 3981 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 3992 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 4004 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 4009 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4014 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4019 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4024 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4029 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4034 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4039 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4044 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 4049 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 4057 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_609()
#line 4064 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_610()
#line 4078 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_611()
#line 4084 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_612()
#line 4090 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_614()
#line 4098 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_618()
#line 4114 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_620()
#line 4124 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_621()
#line 4132 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
#line 4138 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_623()
#line 4143 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }

void case_624()
#line 4150 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }

void case_625()
#line 4155 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_635()
#line 4199 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_636()
#line 4205 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_637()
#line 4217 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_638()
#line 4223 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_641()
#line 4238 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
	  }

void case_644()
#line 4248 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			Report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_645()
#line 4267 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_646()
#line 4275 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_647()
#line 4280 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_648()
#line 4285 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4290 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4295 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4300 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4305 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4310 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4315 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4320 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4325 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4330 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4335 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4342 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_664()
#line 4366 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_665()
#line 4372 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_666()
#line 4391 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_667()
#line 4399 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_668()
#line 4405 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_669()
#line 4431 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_670()
#line 4438 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_674()
#line 4458 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (lexer.Location, "generic type variance");
		else if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_677()
#line 4494 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_679()
#line 4506 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_680()
#line 4511 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_681()
#line 4520 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_682()
#line 4525 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_690()
#line 4552 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_723()
#line 4616 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_724()
#line 4621 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_725()
#line 4626 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_726()
#line 4634 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_727()
#line 4642 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);

		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_730()
#line 4655 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_731()
#line 4671 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_732()
#line 4701 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_733()
#line 4712 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_736()
#line 4727 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_738()
#line 4736 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_740()
#line 4751 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_741()
#line 4758 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_742()
#line 4764 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_743()
#line 4771 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_745()
#line 4781 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_746()
#line 4786 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			Report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_751()
#line 4808 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_752()
#line 4817 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_759()
#line 4850 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_761()
#line 4863 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_762()
#line 4868 "cs-parser.jay"
{
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_763()
#line 4876 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_767()
#line 4894 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }

void case_768()
#line 4907 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_769()
#line 4915 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_772()
#line 4929 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_773()
#line 4938 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_775()
#line 4955 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_776()
#line 4964 "cs-parser.jay"
{
		Report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_778()
#line 4973 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_779()
#line 4980 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_780()
#line 4987 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }

void case_783()
#line 5006 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (4);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_784()
#line 5013 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_785()
#line 5023 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_791()
#line 5042 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_792()
#line 5054 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_793()
#line 5062 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_795()
#line 5078 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }

void case_796()
#line 5090 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_799()
#line 5103 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_800()
#line 5110 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_808()
#line 5134 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_809()
#line 5150 "cs-parser.jay"
{
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_810()
#line 5155 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_811()
#line 5164 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_818()
#line 5187 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_819()
#line 5195 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_820()
#line 5203 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_821()
#line 5209 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5214 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 5222 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
#line 5230 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
#line 5238 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			Report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_826()
#line 5254 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_830()
#line 5280 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_831()
#line 5285 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_832()
#line 5290 "cs-parser.jay"
{
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_833()
#line 5298 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_834()
#line 5305 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_838()
#line 5333 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_840()
#line 5352 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			Report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_843()
#line 5380 "cs-parser.jay"
{
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_845()
#line 5390 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_846()
#line 5401 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_847()
#line 5411 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_848()
#line 5416 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_849()
#line 5429 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_850()
#line 5439 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_851()
#line 5444 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_852()
#line 5454 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }

void case_854()
#line 5470 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_855()
#line 5481 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_856()
#line 5493 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_857()
#line 5504 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_858()
#line 5511 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_859()
#line 5520 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_860()
#line 5528 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_861()
#line 5543 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_862()
#line 5551 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_864()
#line 5570 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_866()
#line 5585 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_867()
#line 5602 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_870()
#line 5625 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_871()
#line 5632 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_872()
#line 5640 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_873()
#line 5647 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_877()
#line 5663 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_884()
#line 5683 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_886()
#line 5701 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (BooleanExpression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_887()
#line 5711 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_888()
#line 5719 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_889()
#line 5727 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_890()
#line 5735 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_891()
#line 5771 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_892()
#line 5779 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_893()
#line 5787 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_894()
#line 5795 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_898()
#line 5850 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_900()
#line 5861 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_901()
#line 5868 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_903()
#line 5877 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, (Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_904()
#line 5884 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_912()
#line 5924 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_913()
#line 5940 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_916()
#line 5966 "cs-parser.jay"
{ 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		var baseclass_list = new List<FullNamedExpression> ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (TypeManager.object_type, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (TypeManager.void_type, Location.Null),
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_917()
#line 5996 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   25,   25,   23,   23,
   26,   26,   27,   27,    9,    9,    9,   28,   28,   28,
   28,   28,    3,   17,   17,   34,   34,   35,   35,   36,
   38,   38,   38,   38,   37,   37,   42,   39,   40,   41,
   41,   43,   43,   43,   43,   43,   44,   44,   48,   45,
   47,   49,   49,   49,   50,   50,   51,   51,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   65,
   67,   70,   71,   30,   30,   73,   69,   72,   72,   74,
   74,   75,   75,   75,   75,   75,   75,   75,   75,   75,
   75,   78,   53,   79,   79,   80,   80,   81,   83,   77,
   77,   82,   82,   88,   54,   92,   54,   54,   87,   95,
   87,   89,   89,   96,   96,   97,   98,   97,   93,   93,
   99,   99,  100,  101,   91,   91,   94,   94,   94,  104,
   55,  107,  108,  102,  109,  110,  102,  102,  103,  103,
  106,  106,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  114,  114,  117,  117,  117,  120,  117,  118,
  118,  121,  121,  122,  122,  122,  115,  115,  115,  123,
  123,  123,  116,  125,  127,  128,   56,  130,  131,  132,
   58,  126,  126,  126,  126,  126,  136,  133,  137,  134,
  135,  135,  135,  138,  139,  140,  142,   31,   31,  141,
  141,  143,  143,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  147,   59,  146,  146,  148,  148,  151,  145,
  145,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  153,  152,  154,  152,  152,  152,   60,
  157,  159,  155,  156,  156,  158,  158,  163,  161,  164,
  161,  161,  165,   61,  167,   57,  170,  171,   57,  166,
  173,  166,  168,  168,  174,  174,  175,  176,  175,  177,
  172,  169,  169,  169,  169,  169,  181,  178,  182,  179,
  180,  180,  184,  186,  187,   32,  183,  183,  183,  185,
  185,  185,  188,  188,  189,  190,  189,  191,  192,  193,
   33,  194,  194,   14,   14,  195,  195,  198,  197,  197,
  197,  199,  199,  201,   64,  124,  105,  105,  129,  129,
  202,  202,  202,  200,  200,  203,  203,  204,  204,  206,
  206,   86,   76,   76,   90,   90,  119,  119,  149,  149,
  207,  207,  207,  207,  207,  211,  211,  212,  212,  210,
  210,  210,  210,  210,  210,  210,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  215,  215,  215,  216,  216,  216,
  235,  235,  236,  236,  237,  237,  218,  218,  234,  234,
  234,  234,  234,  234,  234,  234,  220,  238,  238,  239,
  239,  240,  240,  242,  242,  242,  243,  243,  243,  243,
  243,  244,  244,  162,  162,  248,  248,  248,  248,  248,
  250,  250,  249,  249,  251,  251,  251,  251,  252,  221,
  247,  247,  247,  253,  253,  254,  254,  222,  223,  223,
  224,  225,  226,  226,  217,  217,  217,  217,  217,  258,
  255,  227,  259,  259,  260,  260,  261,  261,  262,  262,
  262,  262,  256,  256,  208,  208,  263,  263,  264,  264,
  257,  257,   85,   85,  265,  265,  266,  228,  267,  267,
  267,  268,  268,  268,  268,  268,  269,  196,  229,  230,
  231,  232,  271,  233,  270,  270,  273,  272,  219,  274,
  274,  274,  274,  276,  275,  275,  275,  275,  275,  275,
  275,  277,  277,  277,  277,  278,  278,  278,  278,  278,
  278,  279,  279,  279,  280,  280,  280,  280,  280,  281,
  281,  281,  282,  282,  283,  283,  284,  284,  285,  285,
  286,  286,  287,  287,  288,  288,  289,  289,  289,  289,
  289,  289,  289,  289,  289,  289,  289,  290,  290,  291,
  291,  291,  292,  292,  293,  293,  296,  294,  295,  295,
  298,  297,  299,  300,  297,   46,   46,  245,  245,  245,
  245,   84,  302,  303,  304,  305,  306,   29,   63,   63,
   62,   62,  111,  111,  307,  307,  307,  307,  307,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  307,   66,
   66,   68,   68,  308,  308,  309,  310,  310,  311,  311,
  311,  311,  205,  205,  312,  312,  314,  112,  315,  315,
  316,  160,  313,  313,  317,  317,  318,  318,  318,  318,
  322,  322,  323,  323,  323,  320,  320,  320,  320,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  338,  338,  338,  338,  325,  339,  321,  340,  340,
  341,  341,  341,  341,  341,  341,  209,  209,  342,  344,
  319,  347,  319,  343,  343,  343,  345,  345,  350,  350,
  351,  351,  346,  346,  348,  348,  352,  352,  353,  349,
  349,  349,  326,  326,  337,  337,  354,  355,  355,  327,
  327,  356,  356,  359,  357,  358,  358,  360,  360,  360,
  363,  361,  362,  362,  364,  364,  328,  328,  328,  328,
  365,  366,  370,  367,  369,  369,  371,  371,  375,  374,
  374,  372,  372,  373,  373,  377,  376,  376,  368,  378,
  368,  329,  329,  329,  329,  329,  329,  379,  380,  381,
  381,  381,  382,  383,  384,  384,  385,  385,  330,  330,
  330,  330,  386,  386,  388,  388,  387,  389,  387,  387,
  331,  332,  390,  335,  333,  392,  393,  336,  394,  395,
  334,  334,  391,  391,  301,  301,  301,  301,  396,  396,
  398,  398,  400,  399,  401,  399,  397,  397,  405,  403,
  406,  407,  403,  402,  402,  408,  408,  409,  409,  409,
  409,  409,  414,  410,  415,  411,  416,  417,  418,  412,
  420,  421,  422,  412,  419,  419,  424,  413,  423,  427,
  423,  426,  429,  426,  425,  425,  425,  428,  428,  428,
  404,  430,  404,    4,    4,  431,    4,  433,    4,  432,
  432,  432,  432,  246,  246,  241,  241,
  };
   static readonly short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    6,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    1,    1,    2,    5,    4,    2,
    1,    1,    1,    1,    1,    3,    0,    3,    1,    0,
    3,    0,    1,    1,    3,    3,    1,    1,    0,    4,
    4,    0,    1,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    0,    0,    0,   13,    5,    0,    4,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    9,    0,    1,    1,    2,    3,    0,    3,
    1,    1,    1,    0,    8,    0,    9,    6,    0,    0,
    3,    0,    1,    1,    2,    2,    0,    5,    0,    1,
    1,    2,    3,    0,    4,    2,    1,    1,    1,    0,
    3,    0,    0,   10,    0,    0,   11,    8,    1,    1,
    0,    1,    1,    3,    3,    3,    5,    3,    5,    1,
    1,    1,    1,    3,    4,    6,    4,    0,    7,    0,
    1,    1,    2,    1,    1,    1,    4,    6,    4,    1,
    2,    2,    1,    0,    0,    0,   10,    0,    0,    0,
   13,    1,    2,    1,    2,    1,    0,    5,    0,    5,
    1,    1,    1,    0,    0,    0,    0,   15,    5,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    5,    1,    1,    1,    1,    0,    7,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    7,    0,    7,    2,    2,    2,
    0,    0,    9,    1,    1,    0,    1,    0,    6,    0,
    6,    1,    0,    8,    0,    9,    0,    0,   10,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    2,    2,    2,    1,    1,    1,    0,    5,    0,    5,
    1,    1,    0,    0,    0,   12,    0,    2,    2,    0,
    1,    2,    1,    3,    2,    0,    5,    0,    0,    0,
   13,    0,    1,    1,    3,    1,    4,    2,    0,    3,
    2,    1,    3,    0,    3,    1,    1,    3,    1,    2,
    3,    4,    4,    0,    3,    1,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    2,    2,    2,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    4,    4,
    4,    3,    3,    4,    3,    4,    4,    0,    1,    3,
    4,    0,    1,    1,    3,    2,    3,    1,    2,    3,
    2,    1,    1,    0,    1,    1,    3,    3,    2,    2,
    1,    1,    1,    1,    2,    2,    4,    3,    1,    4,
    1,    3,    2,    1,    3,    1,    1,    1,    4,    3,
    2,    2,    6,    3,    7,    4,    3,    7,    3,    0,
    2,    4,    1,    2,    0,    1,    1,    3,    3,    1,
    1,    1,    0,    1,    1,    2,    2,    3,    1,    2,
    0,    1,    2,    4,    1,    3,    0,    5,    1,    1,
    1,    2,    3,    3,    4,    4,    1,    2,    4,    4,
    4,    3,    0,    4,    0,    1,    0,    4,    4,    1,
    2,    2,    1,    4,    1,    2,    2,    2,    2,    2,
    2,    1,    3,    3,    3,    1,    3,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    5,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
    2,    1,    0,    1,    1,    1,    0,    2,    1,    1,
    0,    4,    0,    0,    7,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    0,    0,    0,   15,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    2,    0,    1,    1,    2,    4,    1,    3,    1,    3,
    1,    1,    0,    1,    1,    1,    0,    4,    1,    1,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    4,    1,    2,
    2,    2,    2,    2,    2,    1,    1,    2,    1,    0,
    6,    0,    7,    0,    2,    1,    0,    1,    1,    2,
    2,    4,    0,    2,    0,    1,    1,    2,    4,    1,
    5,    2,    2,    2,    2,    2,    1,    1,    1,    1,
    1,    5,    7,    0,    8,    0,    1,    1,    2,    1,
    0,    3,    1,    2,    3,    1,    1,    1,    1,    1,
    5,    7,    0,    4,    7,    1,    0,    1,    0,    5,
    1,    0,    1,    0,    1,    1,    1,    3,    6,    0,
    9,    1,    1,    1,    1,    1,    1,    2,    2,    3,
    4,    3,    3,    3,    4,    3,    0,    1,    3,    4,
    5,    3,    1,    2,    0,    1,    2,    0,    7,    3,
    2,    2,    0,    3,    5,    0,    0,   10,    0,    0,
   10,    5,    0,    2,    2,    2,    2,    2,    4,    5,
    4,    5,    0,    5,    0,    6,    3,    2,    0,    3,
    0,    0,    6,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    0,    5,    0,    3,    0,    0,    0,   12,
    0,    0,    0,   13,    0,    2,    0,    3,    1,    0,
    4,    1,    0,    4,    1,    2,    2,    1,    2,    2,
    0,    0,    4,    2,    3,    0,    4,    0,    3,    1,
    2,    1,    0,    0,    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
   47,    8,    0,    0,    0,    0,  918,    0,    0,    0,
    4,    0,    5,    9,   11,   12,   13,   20,   21,   46,
    0,   45,   48,   49,   50,   51,   52,    0,   56,   23,
    0,    0,    0,  344,    0,  346,   17,    0,   64,   62,
   63,    0,    0,    0,    0,    0,   65,   67,  914,    0,
    0,   18,    0,    1,    0,   10,    3,    0,  650,  656,
  648,    0,  645,  655,  649,  647,  646,  653,  651,  652,
  658,  654,  657,  659,    0,    0,  643,   57,    0,  538,
    0,  348,    0,   24,    0,    0,    0,    0,    0,    0,
   60,    0,  769,    0,  392,    0,  398,  405,    0,    0,
    0,  393,    0,    0,    0,  395,  432,    0,  394,    0,
    0,    0,    0,  401,    0,  403,    0,  430,  390,    0,
  397,  399,    0,  391,    0,  488,    0,  431,    0,  527,
  402,  404,    0,  843,  400,    0,    0,    0,  631,    0,
    0,  677,    0,  726,    0,    0,    0,    0,    0,    0,
    0,    0,  429,    0,  623,    0,  768,  709,    0,    0,
  396,    0,    0,  407,  408,    0,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,  427,  428,  627,  555,    0,  553,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  628,  626,
  629,  630,  693,  695,    0,  691,  694,  710,  712,  713,
  714,  715,  716,  717,  718,  719,  720,  721,  711,    0,
    0,    0,  770,  771,  787,  788,  789,  790,  812,  813,
  814,  815,  816,  817,    0,    0,    0,  922,  919,  925,
   19,  915,    2,    6,   29,   27,    0,    0,    0,  640,
    0,  644,    0,  351,    0,    0,  352,  373,    0,    0,
    0,    0,  345,   16,    0,   66,   59,    0,   68,    0,
    0,    0,  818,  433,  434,  841,    0,    0,    0,    0,
    0,  409,    0,  819,    0,  547,  543,  546,  725,  767,
  696,  723,  722,  724,  697,  698,  699,  700,  701,  702,
  703,  704,  705,  706,  707,  708,    0,    0,    0,  793,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  828,    0,  406,    0,    0,    0,    0,
    0,    0,  842,    0,    0,    0,  739,  735,    0,    0,
    0,    0,    0,    0,    0,    0,  552,  556,  557,  551,
  561,  560,  558,  559,    0,    0,  621,  727,  426,  425,
    0,    0,    0,  343,    0,  733,  734,    0,  491,  492,
    0,    0,    0,  731,  732,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  917,
  692,  740,  730,  765,  766,  885,    0,    0,    0,  897,
  857,  855,  878,    0,    0,  876,  879,  880,  881,  882,
  858,  856,  921,    0,    0,    0,    0,  370,  372,  354,
    0,  634,    0,    0,   22,  385,  381,  382,    0,  350,
  380,  383,  384,  347,   58,    0,    0,   73,   74,   77,
   78,  490,    0,    0,  486,  487,    0,  484,    0,  742,
    0,    0,    0,    0,  763,  764,    0,    0,    0,  632,
    0,  822,  820,  633,    0,    0,  512,    0,    0,    0,
  503,    0,  507,  517,  519,    0,    0,  497,  499,    0,
    0,    0,    0,    0,  494,    0,  501,  375,  516,  823,
    0,    0,  824,  832,    0,    0,    0,  833,    0,    0,
  844,    0,    0,  738,    0,    0,    0,    0,    0,  690,
    0,    0,  685,  687,  688,  689,  437,  438,  826,    0,
    0,    0,  195,  194,  196,    0,    0,    0,    0,  377,
    0,  608,    0,    0,  442,    0,  445,    0,  443,  542,
    0,    0,    0,    0,    0,  471,  474,    0,    0,  466,
  473,  472,  562,    0,  597,  598,  599,  600,  601,  602,
  603,  604,  605,  607,  606,  563,  565,  564,  570,  571,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  594,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  869,  871,  868,    0,  877,
   28,   35,    0,    0,    0,    0,  323,    0,  229,    0,
  105,    0,  353,    0,   79,   71,    0,  441,  489,    0,
  540,    0,  549,  182,  203,    0,    0,    0,  172,    0,
    0,    0,  183,  544,    0,  846,  796,    0,  807,  794,
    0,  798,    0,    0,    0,  821,    0,    0,    0,  502,
    0,  518,  520,  159,  523,  157,  158,  525,    0,    0,
    0,  458,    0,    0,  454,    0,    0,  481,    0,  522,
  496,    0,  539,    0,  837,    0,  830,    0,  834,  531,
    0,    0,    0,  529,    0,    0,  541,    0,  849,    0,
  861,    0,  859,    0,  679,  680,  678,  686,  825,  616,
  622,  615,    0,  728,  611,    0,    0,    0,  554,  446,
  440,  444,  439,  480,  479,  476,  475,    0,  470,  435,
  436,  447,    0,    0,  746,    0,    0,  886,  863,    0,
  887,    0,  883,    0,  898,    0,    0,    0,    0,  867,
    0,   31,   26,  338,    0,  355,  329,  328,    0,  635,
  225,  101,   84,   83,    0,    0,   75,   76,  485,    0,
    0,    0,    0,    0,  192,    0,  548,    0,    0,    0,
    0,    0,  799,    0,    0,    0,    0,    0,  845,  509,
  508,    0,    0,  461,    0,    0,  926,  927,  450,  456,
    0,  459,    0,  483,    0,    0,    0,  774,  840,    0,
  831,  537,  532,    0,    0,  528,    0,  852,    0,  791,
  862,  860,  620,  619,  618,  610,  609,  624,  478,    0,
  468,  467,  596,    0,  760,  745,    0,    0,    0,  749,
    0,  865,    0,  891,    0,  906,  907,  900,  870,  872,
  912,   14,    0,    0,    0,  369,    0,    0,  366,  324,
    0,    0,    0,   81,   80,  754,  132,  133,    0,    0,
    0,  757,  201,  202,    0,  193,    0,    0,    0,  175,
  184,  176,  178,    0,    0,    0,    0,  803,    0,  808,
  809,    0,    0,  526,  524,  460,  462,  463,  457,  451,
  455,    0,  514,    0,  482,  493,  449,    0,  836,    0,
    0,  533,    0,    0,    0,  477,    0,    0,  741,  750,
  864,    0,    0,    0,  884,    0,    0,    0,   15,    0,
    0,    0,  676,  675,    0,  674,    0,  365,    0,    0,
    0,    0,    0,    0,  743,  758,  187,    0,  199,    0,
    0,    0,  792,  854,    0,    0,    0,  810,  773,  498,
  495,  780,    0,  786,    0,    0,  778,    0,  783,  838,
  536,  535,    0,  625,    0,    0,  866,  888,    0,    0,
    0,  902,    0,  913,   43,    0,    0,  339,  368,  367,
    0,  325,    0,  333,  389,  388,    0,  386,    0,  636,
    0,  664,  226,  102,    0,    0,  188,    0,  179,  177,
  847,  800,    0,    0,  805,    0,    0,  775,  779,    0,
  784,    0,  850,    0,  752,    0,  892,  909,  910,  903,
  873,   36,   44,    0,    0,    0,    0,    0,    0,    0,
  665,    0,    0,  759,  186,    0,  198,    0,    0,  811,
  785,    0,  681,  839,    0,  761,    0,    0,    0,  340,
    0,    0,  334,  387,    0,    0,    0,  106,  103,  189,
  848,  795,    0,  851,  889,    0,  904,    0,    0,  326,
  671,    0,  672,  669,    0,  667,   99,    0,   98,    0,
    0,   87,   89,   90,   91,   92,   93,   94,   95,   96,
   97,  160,    0,    0,  242,  234,  235,  236,  237,  238,
  239,  240,  241,    0,    0,  232,    0,    0,    0,    0,
  893,  341,  337,    0,    0,    0,  637,   88,    0,  285,
  280,  284,    0,  227,  233,  120,  112,  113,  114,  115,
  116,  117,  118,  119,  121,    0,    0,  110,  104,  682,
    0,    0,  670,  668,    0,    0,    0,    0,    0,    0,
    0,  293,    0,    0,  243,    0,    0,  251,    0,  170,
  161,  169,    0,  107,  111,    0,  890,    0,    0,    0,
  279,    0,    0,  278,    0,    0,    0,    0,  359,    0,
  357,    0,    0,  204,    0,    0,    0,    0,    0,  638,
  228,  896,  894,  122,    0,  356,    0,    0,    0,    0,
  136,    0,    0,    0,    0,    0,    0,  162,    0,    0,
  208,    0,  360,    0,  246,  245,  244,  257,  256,  253,
  258,  259,  252,  271,  270,  263,  264,  260,  262,  261,
  265,  254,  255,  266,  267,  273,  272,  268,  269,    0,
    0,  297,    0,  276,  138,    0,  274,  165,    0,    0,
  140,    0,  361,    0,    0,  205,    0,    0,    0,  358,
  249,  131,  129,    0,    0,  301,    0,    0,    0,    0,
    0,    0,    0,  282,    0,    0,    0,    0,  144,    0,
    0,    0,    0,  362,  363,    0,    0,    0,    0,    0,
  126,  316,    0,  298,    0,    0,  310,    0,    0,    0,
  305,    0,  156,    0,    0,    0,    0,  151,    0,    0,
  294,    0,  141,    0,  135,  145,  163,  168,  216,    0,
  206,    0,    0,    0,    0,  130,    0,  123,  127,    0,
    0,    0,  312,    0,  313,  302,    0,    0,  296,  306,
  277,    0,    0,  137,  152,  275,  166,  292,    0,  283,
  287,  147,    0,    0,    0,  213,  215,  209,  250,  128,
  317,  319,  299,    0,    0,  311,  308,  155,  153,    0,
    0,    0,    0,  164,  217,  219,  207,    0,    0,    0,
  310,  167,  288,  290,  148,    0,    0,  210,  321,  322,
  318,  320,  309,    0,    0,  223,  222,  221,  218,  220,
    0,    0,    0,  211,  289,  291,
  };
  protected static readonly short [] yyDgoto  = {             9,
   10,   11,   12,   13,   58,   14,   15,   16,   17,  863,
   53,   18,   19,  256,   33,   20,  646,  247,  623,  435,
 1409,   90,  864,  761,  941,  996,  997,   22,   23,   24,
   25,   26,   27,  647,   29,   44,   45,   46,   47,   48,
  269,   92,  457,  458,  459,  290,  567,  776,  775, 1100,
 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
 1111,   75,  251, 1201,  632,  951,  873, 1010, 1079, 1053,
 1128, 1156, 1127, 1157, 1158, 1006, 1284, 1261, 1309, 1310,
 1311,  876, 1307,  877,  677, 1174, 1272, 1226, 1297,  507,
 1290, 1266, 1326,  845, 1295, 1298, 1299, 1393, 1327, 1328,
 1324, 1112, 1181, 1139, 1202,  648, 1274, 1373, 1292, 1390,
   76,  291,  649,  650,  651,  652,  653,  783,  548, 1056,
  784,  549,  786, 1204, 1230, 1341, 1302, 1375, 1205, 1277,
 1398, 1421, 1342, 1343, 1419, 1406, 1407,  630,  872, 1052,
 1124, 1183, 1125, 1126, 1175, 1237, 1208, 1176,  258, 1260,
 1306, 1178, 1291, 1288, 1113, 1141, 1198, 1370, 1332, 1064,
 1371,  568, 1414, 1415, 1197, 1287, 1263, 1319, 1314, 1285,
 1351, 1356, 1317, 1320, 1321, 1401, 1357, 1315, 1316, 1411,
 1399, 1400,  627,  769, 1002,  949, 1046, 1003, 1004, 1071,
  865, 1044, 1088,  447,   34,  159,   82,   36,  259,  766,
  625, 1218,  868,  869,  945,  439,  260,  319,  446,  325,
 1007, 1008,  161,  162,  326,  164,  165,  166,  167,  168,
  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
  179,  180,  181,  182,  183,  277,  742,  916,  505,  683,
  809,  684,  685,  909,  184,  242,  689,  569,  570,  571,
  572,  736,  467,  468,  320,  914,  691,  321,  490,  491,
  492,  493,  322,  496,  679,  332,  705,  706,  823,  287,
  473,  288,  472,  185,  186,  187,  188,  189,  190,  191,
  192,  193,  194,  195,  196,  197,  198,  199,  200,  551,
  552,  553,  721,  722,  835,  723,  201,  541,  361,  925,
  202,  485,  628,  871, 1050, 1179,   77, 1011, 1012, 1095,
 1096,  946,  531,  345,  717, 1083,  532,  533,  292,  293,
  294,  205,  206,  207,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  219,  307,  542,  220,
  221,  339,  747,  608,  848,  781,  642,  880,  846,  849,
  850,  881,  882,  308,  222,  223,  224,  975,  918,  976,
  977,  978, 1030,  979,  225,  226,  227,  228,  660,  478,
  661,  899, 1023,  662,  897,  663, 1025, 1026,  229,  230,
  231,  232,  233,  234,  327,  517,  518,  920, 1032,  335,
  896,  792, 1058,  829, 1065,  235,  422,  236,  423,  851,
  932,  424,  619,  760,  757,  758,  937,  425,  426,  427,
  428,  429,  430,  855,  609,  853, 1036, 1130, 1187,  934,
 1068, 1162,  755,  615,  756,  991,  936,  992, 1069,  938,
   50,  239,   51,
  };
  protected static readonly short [] yySindex = {         -189,
    0,    0, -203, -193, -205,  -67,    0, -185,    0,   61,
    0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
11692,    0,    0,    0,    0,    0,    0,  -87,    0,    0,
  208,  -69,   14,    0,  -25,    0,    0,  -10,    0,    0,
    0, -224,  -69,  105,   97,  159,    0,    0,    0, 5840,
   53,    0, -262,    0,   54,    0,    0,   54,    0,    0,
    0, -191,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  258, 8855,    0,    0,  105,    0,
  441,    0,  156,    0,  183,  247, -224,   97,  105,  284,
    0,  300,    0,  212,    0,  370,    0,    0,  217,10362,
  392,    0,   27,  428, 5993,    0,    0,   27,    0,   27,
   27, -156,   27,    0,   27,    0,  339,    0,    0, 9489,
    0,    0,   27,    0,   27,    0, 9489,    0,  267,    0,
    0,    0,  217,    0,    0,   27,  449,   27,    0, 6622,
 7081,    0, 9489,    0,10149,10149,10149,10149,10149,10149,
10149,10149,    0,  -61,    0, 7234,    0,    0,  427, -210,
    0,  777,    2,    0,    0,  490,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1152,    0,  714,   66,  623,
  431,  664,  496,  485,  548,  536,  353,  578,    0,    0,
    0,    0,    0,    0, 2220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  608,
  620,  -21,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  147,  430,   53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  658, 7387,  631,    0,
  286,    0, -198,    0,  449,  391,    0,    0, -217,  620,
    2,  183,    0,    0,  672,    0,    0, 9621,    0,  798,
  662, 9753,    0,    0,    0,    0, 9489,   27,   27,  417,
  777,    0,  669,    0, 7234,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  752,  -14,10362,    0,
 7234, 9489,  737,  740, 9489, 9489, 7788,  415,  775, -197,
10878,  620,  126,    0,  746,    0,  789, 7234, 9489,  797,
  466,   27,    0, 9489,  267, 8961,    0,    0,  449, 9489,
 -127,  739, -116,  758, 6146, -251,    0,    0,    0,    0,
    0,    0,    0,    0,  803, 9489,    0,    0,    0,    0,
10807,  830,  183,    0,  263,    0,    0,  310,    0,    0,
  795, 9753, 8697,    0,    0,10149, 9489, 9489, 9489, 9489,
 9489, 9489, 9489, 9489, 9489, 9489, 9489,10149,10149,10149,
 7234, 7234,10149,10149,10149,10149,10149,10149,10149,10149,
10149,10149,10149,10149,10149,10149,10149,10149, 9489,    0,
    0,    0,    0,    0,    0,    0,10932,10949,  812,    0,
    0,    0,    0, -236,  673,    0,    0,    0,    0,    0,
    0,    0,    0,  832,  890,  449,  631,    0,    0,    0,
  807,    0, 1002, 1010,    0,    0,    0,    0, 7234,    0,
    0,    0,    0,    0,    0,  521,  579,    0,    0,    0,
    0,    0,  183,   95,    0,    0,  505,    0,  903,    0,
  904,   56,  267,   27,    0,    0,  861, 6911, -172,    0,
  905,    0,    0,    0,  910,  911,    0,  357,    0,  916,
    0,  913,    0,    0,    0,  531, 6605,    0,    0, 7634,
  614, 9489,  775, 8697,    0,  449,    0,    0,    0,    0,
  917,  921,    0,    0,  217,  267,  153,    0, 2932,  926,
    0,  934,  882,    0,  936, 9489,  987, 9489, 1012,    0,
 -199, 6146,    0,    0,    0,    0,    0,    0,    0,  935,
  267, 6146,    0,    0,    0,  449, -224,  894,11003,    0,
  943,    0,  946,10149,    0,  200,    0,  260,    0,    0,
  624, 9489, 9489,  952, 1065,    0,    0,  107,  956,    0,
    0,    0,    0,  714,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  714,  714,   66,   66,  623,  623,  623,  623,  431,  431,
  664,  496,  485,  548,  536,    0,  957, -195, 9489, -107,
  915,  -90,  918,  950, 9489,    0,    0,    0,  979,    0,
    0,    0,  964,  970,  929, 3087,    0,  631,    0,  631,
    0,  631,    0,  471,    0,    0, 9621,    0,    0, 9753,
    0,  971,    0,    0,    0,  603,  -87,  973,    0,  977,
  980,  982,    0,    0, 9489,    0,    0,  939,    0,    0,
  984,    0,  988, 9489, 1069,    0, 5993, 5993, 7064,    0,
 7788,    0,    0,    0,    0,    0,    0,    0,  989, 9093,
   36,    0,  -59, -124,    0,  940,  949,    0,  -43,    0,
    0,  997,    0, 1006,    0, 3242,    0,  267,    0,    0,
  272,  530,  961,    0, 1003, 1001,    0, 5993,    0, 5993,
    0, 9489,    0, 9489,    0,    0,    0,    0,    0,    0,
    0,    0, 7217,    0,    0,  962,10807, 1034,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8565,    0,    0,
    0,    0, 8829, 9489,    0, 6758, 1008,    0,    0, 1085,
    0, 1086,    0,  679,    0, 1016, 9489, 9489,  975,    0,
 1040,    0,    0,    0, -120,    0,    0,    0, 1037,    0,
    0,    0,    0,    0, 9489, 9489,    0,    0,    0, 9225,
 1031,  603,11003,  627,    0, 7234,    0, -186, 1147, 1154,
 1043, 1036,    0, 9489, 9489, 1046, 9489, 1135,    0,    0,
    0, 7064, 1058,    0, -167, 9357,    0,    0,    0,    0,
 7502,    0, 1167,    0,  620, 9489, 1061,    0,    0, 1011,
    0,    0,    0, 1014,  564,    0, 1015,    0, 1036,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  629,
    0,    0,    0,10878,    0,    0, 1018, 1054, 1008,    0,
 9489,    0, 9489,    0, 9489,    0,    0,    0,    0,    0,
    0,    0, 1040, -185,   56,    0,  459,  -17,    0,    0,
 1059, 1059, 1059,    0,    0,    0,    0,    0, 1020, 1066,
 1031,    0,    0,    0, -187,    0, -174, 1067, 1070,    0,
    0,    0,    0, 1081, 7064, 1008, -195,    0, 1083,    0,
    0, 1091, 5993,    0,    0,    0,    0,    0,    0,    0,
    0, 1094,    0,  775,    0,    0,    0, -211,    0, 1096,
  564,    0, 1048, 1008,  267,    0, 1051, 1090,    0,    0,
    0, 9489, 1124, 9489,    0, 9489, 1121,  673,    0, -185,
  -92, 1105,    0,    0, 1060,    0, -120,    0,  -87, 3397,
 1136, 1136, 1136, 1102,    0,    0,    0,  504,    0, 1106,
 1220, 1226,    0,    0, 1118, 1008, 9489,    0,    0,    0,
    0,    0, 9489,    0, 1130, -181,    0, -181,    0,    0,
    0,    0, 1127,    0, 9489, 6758,    0,    0, 1138,  725,
 1126,    0, 9489,    0,    0, 1134,  -92,    0,    0,    0,
 1087,    0, 1132,    0,    0,    0, 1133,    0, 1095,    0,
 1136,    0,    0,    0, 9225, 1142,    0, 9489,    0,    0,
    0,    0, 1143,  988,    0, 5993, 1129,    0,    0, 6146,
    0, 1141,    0, 1144,    0, 9489,    0,    0,    0,    0,
    0,    0,    0, 1136,    0, 1148,  -87, 3397, 1145, 1150,
    0, 1151, 1156,    0,    0, 9489,    0, 5993, 5993,    0,
    0, 6146,    0,    0, 5993,    0, 1169, 9489, 9489,    0,
 1146,  964,    0,    0,10861,    9,  -87,    0,    0,    0,
    0,    0, 6146,    0,    0, 1172,    0, 1149, 9489,    0,
    0, 1158,    0,    0, 1157,    0,    0, 8855,    0, 1164,
    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  264, 8855,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1170,  -87,    0,  -87,  964, 1174, 9489,
    0,    0,    0, 1168,10861,10580,    0,    0,  436,    0,
    0,    0,10612,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1175,  -87,    0,    0,    0,
 1184, 9489,    0,    0, 7234, 7234,  178,10878,  206,  449,
 1206,    0, -224, 6784,    0, 1239,    0,    0,  964,    0,
    0,    0,  964,    0,    0, 1131,    0, 1184, 1155, 1159,
    0, 7234, -171,    0, 7234, 1159, 1165, 1180,    0, -224,
    0, 1181,  838,    0, 1195, 1166, -206,  551,10111,    0,
    0,    0,    0,    0, -224,    0, 1200, 1171, 1197, 1193,
    0, 1201, 1203, 1204,   56, 1207, 1209,    0, 1214, 1224,
    0,  183,    0,  722,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1216,
 -175,    0, 1215,    0,    0, 1228,    0,    0, 1223, 1227,
    0, 1229,    0,   56,   56,    0,   56, 1233, 1237,    0,
    0,    0,    0, 1238,   87,    0, 1241,   56, 1340, 1242,
   56,   56,  436,    0, 7064, 1183, 1243, 1229,    0, 1245,
 1248,   96, 1252,    0,    0,   56, 9225, 1205, 1249, 1238,
    0,    0, 8855,    0,  -87,  -87,    0, 1211, 1251, 1241,
    0, 1258,    0, 9489, 1213, 1256, 1242,    0, 1263, 1269,
    0, -115,    0, 1232,    0,    0,    0,    0,    0, 8855,
    0,   96,   96, 1275, 1273,    0, -175,    0,    0, -114,
 1282, 8855,    0, 8855,    0,    0, 7064, 1270,    0,    0,
    0, 1285, 1228,    0,    0,    0,    0,    0,  138,    0,
    0,    0, 1136,  764, 1284,    0,    0,    0,    0,    0,
    0,    0,    0, 1337, 1390,    0,    0,    0,    0, 1136,
 1288, 1291, 7064,    0,    0,    0,    0,   96,  552,  552,
    0,    0,    0,    0,    0, -111, -111,    0,    0,    0,
    0,    0,    0, 8697, 8697,    0,    0,    0,    0,    0,
 1295, 1292, 1293,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1837,
    0,    0,    0,    0,    0, 6299,    0,    0,    0, 1837,
    0, 1662,    0,    0,    0,    0,    0,    0,    0,    0,
  645,    0,    0,    0,    0,    0,    0, 1265,    0,    0,
  315, 1298,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  680,  635,    0, 1297,    0,    0,    0,    0,    0,
 1714,    0,   39,    0, 1662,    0,    0, 1662,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,10294,    0,    0,    0,    0,
    0,    0,    0,    0, 2059,    0, 3703, 1297, 1299,    0,
    0,  640,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1301,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11020,    0,    0, 1300,
    0,    0,    0,    0,    0,    0, 1300,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   -2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5517,    0,    0,    0,    0,    0,  108,
    0, 3551, 5570,    0,    0, 3396,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3885,    0, 3949, 4235, 4427,
 4801, 4993, 5121,  864,  607, 5377, 3638, 3515,    0,    0,
    0,    0,    0,    0,   39,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1253,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  793,  793, 1794,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1310,    0,    0,    0,
    0,    0,    0,    0, 3782, 2320,    0,    0,    0, 2697,
 2320, 2059,    0,    0,    0,    0,    0,  674,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2541,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1312,    0,    0,    0,
    0, 1900, 2541,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2462,    0,
  356,    0,  356,    0,   -9,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1300,    0,    0,    0,    0,
 1306,    0, 2541,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  122,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -8,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
 1314,    0, 1264, 1266,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7768,    0,    0,    0,    0,
    0,    0, 2541, 5684,    0,    0,    0,    0,    0,    0,
    0,10662,    0,    0,    0,    0,    0, 1307,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  923, 1099,    0,
    0, 1317,    0,    0,    0,    0,    0,    0,    0,    5,
    0,    0, 3086, 1315,    0,  180,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1117,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
 7370,    0,    0,    0,    0, -170,  464,    0,    0,    0,
 1316,    0,    0,    0,    0, 2541,    0, 2541,    0,    0,
    0,    0,    0, -231,    0,    0,    0,    0,  148,    0,
    0,    0,    0, 4028,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4092, 4171, 4299, 4363, 4491, 4555, 4619, 4683, 4865, 4929,
 5057, 5185, 5249, 5313, 5441,    0,    0,  719,    0,  356,
    0,  356,    0,    0,    0,    0,    0,    0, 5505,    0,
    0,    0, 1333,    0,  928,    0,    0,    0,    0,    0,
    0,    0,    0, 9885,    0,    0,    0,    0,    0,    0,
    0,  749,    0,    0,    0,11074, 7933,    0,    0,  788,
  796,  815,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1313,    0,    0,    0,    0,    0,    0,    0,
 1318,    0,    0,    0,    0,    0,    0,    0, 1322,    0,
 4720,    0,    0,   63,    0,  -79, 2776,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  525,  604,    0,    0,    0, 1319,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  174,    0,    0,    0, 1321,    0,    0,    0,
    0,    0,    0,  216,    0,  295,    0,    0,    0,    0,
11197,    0,    0,    0, -196,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1323,11091,    0,11145,    0,    0,    0,10775,    0,    0,
    0,  716,    0, 1324,    0,    0,    0, 1456,    0,    0,
    0, 1325,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2931,    0, 3241,    0,    0, 1320,
    0,    0,    0,    0,  525,    0,    0,    0,  716,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  639,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11268,11339,10662,    0, 1276,    0,    0,    0,
  225,  225,  225,    0,    0,    0,    0,    0,    0,    0,
 1327,    0,    0,    0,    0,    0,    0,  833,  839,    0,
    0,    0,    0,    0,    0, 1326,  719,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3086,    0,    0,    0, 1336,    0,    0,
  525,    0,  854, 1326, 7370,    0,  458,  733,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,    0,11410,
11534,    0,    0,    0,    0,    0, -196,    0, -220,    0,
 1338, 1338, 1338,    0,    0,    0,    0,  771,    0,  818,
    0,    0,    0,    0,    0, 1321, 1334,    0,    0,    0,
    0,    0,    0,    0,    0, 1339,    0, 6452,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  276,
  319,    0,    0,    0,    0,    0,11603,    0,    0,    0,
    0,    0, 1341,    0,    0,    0,  313,    0,    0,    0,
  555,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1343,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1332,  612,    0,   17,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -134,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1620,    0,    0,    0, 8042, 8338,    0,    0,    0,
    0,    0, 1342,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  472,    0,    0,10430,    0,    0,
 8116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,10512,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8412,    0, 8190, 1620,    0,    0,
    0,    0,    0,    0,    0,  291,    0,    0,    0,    0,
    0,    0,  291,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8264,    0,    0,    0,
  448,    0,    0,    0,    0,    0,    0,    0,    0, 1013,
  416,    0, 8456,    0,    0,    0, 2667,    0, 1620,    0,
    0,    0, 1620,    0,    0,    0,    0,  448,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  718,
    0, 1344,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  741,    0,  519,    0,    0,    0,
    0,    0,    0,    0,10662,  834,    0,    0,    0,    0,
    0, 1346,    0,  810,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  859,    0,    0,    0,    0,    0,    0,    0,
    0, 1347,    0,10662,10662,    0,10702,    0,    0,    0,
    0,    0,    0, 1353,11662,    0, 1356,10662,10017, 1364,
10662,10662,    0,    0,    0,    0,    0, 1365,    0,    0,
    0, 8486,    0,    0,    0,10662,    0,    0,    0, 1366,
    0,    0,  -74,    0,  541, 8723,    0,    0,    0, 1377,
    0,    0,    0,    0,    0,    0, 1378,    0,    0,    0,
    0,  567,    0,  867,    0,    0,    0,    0,    0,  883,
    0, 5696, 8591,    0,    0,    0,    0,    0,    0,    0,
    0, 1393,    0, 1453,    0,    0,    0,  868,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  571,
    0,    0,    0,    0,    0,    0,    0, 8486,11469, 7660,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1315, 1315,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
 1667,  781,   32,    0,    0,   37, -646,   -4, -384,    0,
  888,    0,    0,   22,    0,    0,    1,    0,    0,    0,
 -600,  -75,    0,    0,    0,    0,    0, -420,    0,    0,
    0,    0,    0,   40,  -12,    0, 1709,    0, 1665,    0,
    0,    0,    0, 1120, 1125,  -48, -239,    0,    0,    0,
    0,  660, -973, -598, -552, -551, -465, -434, -426, -337,
 -606,-1038,    0, -223,    0,  384,    0, -909,    0,    0,
    0,    0,    0,    0,  606,  -35,  418,    0,    0,    0,
  454, -967,    0, -300, -312, 1519,    0,    0,    0, -808,
  405,    0,    0, -489,    0,    0,  475,    0,    0,  444,
    0,    0,  483,    0, -166, -768,    0,    0,    0,    0,
  605,  -45,    0,    0, 1004, 1007, 1017,    0, -511,    0,
    0, -572,  995,  609,    0,-1021,    0,    0,    0,    0,
    0,    0,    0,    0,  395,    0,    0,    0,    0,    0,
    0,    0,    0,  678,    0,    0,    0,    0, -230,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  685,
    0, -494,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  403,    0,    0,  486,    0,    0,  491,  493,  409,
    0,    0,    0,    0,    0,    0,    0,    0,  763,    0,
    0,    0,    0,  213,    0,   59,  -64,    0,    0,  577,
    0,  638,    0,  866,    0, 1296, -307, -204, -105,  574,
    0,  766,    0,  -81,  -30,    0,    0,  -22,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -286,    0,  322,    0,    0, -625,    0,
    0,    0, 1005,    0, -463, -183, 1137, 1080,    0, 1078,
    0, 1259, 1452, 1185,    0,    0,  912,    0,    0,    0,
    0, 1162,    0,    0,    0,    0,    0,    0, -479,    0,
    0,    0,    0,    0,  667,    0,  473,  873,  792,  862,
 1424, 1430, 1434, 1429, 1433,    0, 1435,    0,    0,    0,
 1114,    0,  922,    0,    0,    0,    0,    0,    0,    0,
    0, -305,    0,    0,    0,    0,  -76,    0,  831,    0,
  711,    0,  765,    0,    0,    0,  819, -508,  -47, -336,
  -44,    0, 1645,    0,   21,    0,   30,   42,   43,   44,
   46,   49,   50,   52,   57,   58,    0, -525,    0,  -70,
    0,    0,  954,    0, -549,    0,    0,    0,  869,    0,
 1009,    0,  972, -450,    0,    0,    0,    0,    0,    0,
  876,    0,    0,  878,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  887,    0,    0,    0,    0,
    0,    0,    0,    0,  -86,    0, 1345,    0,    0,    0,
 1028,    0,    0,    0,    0,    0, -221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1436,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  671,    0,
    0,    0,    0,    0,    0,    0,    0,  791,    0,    0,
    0,    0,    0,
  };
  protected static readonly short [] yyTable = {           252,
   21,  157,  203,   52,  158,  204,  498,  678,  535,  692,
   21,  481,  265,  508,  432,   78,  413,  438,  281,  163,
  263,  410,  763,  718,   32,  441,   43,  659,  461,  283,
  489,  338,  466,  724,  525,  927,  686,  726,  924,   28,
  330,   55, 1013, 1014,  972,  257,   56, 1054,  241,   28,
   39,   21,   30,  276,  367,  451,  973,  375,  499, 1136,
  745,   35,   37,   35,  245,   43,    1,    2,  957,  163,
  208,  324,    3,  785,  163, 1143,   40,  282,  324,  209,
 1282,  959,  238,  331, 1220,  378,  973,  333,  814,  360,
   28,  210,  211,  212,  346,  213,  942,   54,  214,  215,
  253,  216,   35, 1116,  342,  344,  217,  218,   41,   54,
   43,  312,  616,  617,  862,  503,  537,  509, 1233,  313,
  362,  664,  282,  282,  282,  282,  282,  282,  282,  282,
  550,  810,  466,  782, 1070,  866,  631,   35,  631,   35,
 1368,  798,  799,  330, 1416,    3,  364,   35, 1381,    3,
  448, 1116,  449, 1147,  888,  453,  157,  203,  365,  158,
  204,  240,   80,    1,  715,  500,  526,  501,    4,  274,
   83,  337,  538,  445,  163,    5,  924,  528,    5,  800,
  908,  746,  828, 1147,  830,   81,  749,  618,  641,   49,
  690,  917,  631,   54,  450,  535,  906,  454,   35,   35,
 1382, 1283,  816,  751,  355,  535,  974, 1234,   42,  883,
   31,  886,  814,  624,   35,  360,  939,   54,  275,  460,
   38,  502,  246,  465,  716,  208,  958,  281,  469,  782,
    6,    7,    8,  524,  209,  281,  974,   21,  477,  960,
  641,  665, 1221,  378,    5,  811,  210,  211,  212,  471,
  213,  142,  356,  214,  215, 1369,  216,  314,  360,   80,
 1417,  217,  218,  480, 1097,  523,  484,  486,  433,  540,
   80,  885,    5,   56, 1350,  479,   28,    5,  163,   80,
  512,  357,   81,  782,  924,  520,  282,  522,  438,  521,
  924,  484,  511,   81,  282,  924,   80,  534,  555,   83,
  536, 1374,   81,  748,  807,  163,   35,  324,    1,  358,
    2,  644,  904, 1384,  163, 1385,    1,    2,  550,   81,
 1376, 1377,  815,  465,  566,   80,  816,  391,  575,  576,
  577,  578,  579,  580,  581,  582,  583,  584,  585, 1346,
  875,  875, 1312,   35,  900,  922,  965,  686,   81,  791,
  414, 1339,  947,  282,  683,  589,  590,  475,  364, 1193,
  607,  359,  736,  392,  808,  282,  282,  282,  452,   35,
  282,  282,  366,    5,  983,  374, 1408,  969,  357,   35,
  332,  611,  613,  337,  489,   84,   35,    3,   85,  874,
  874,  360,  684,  274,  948,    3,  645,  461,  638,  360,
  466, 1391,  415,   86,  770,  964,  771,  658,  772,  476,
    4,  736,  806,  633,  683,  875, 1022,    5,    4,   35,
    5,  515,   80,  360,  285,    5,  453,  654,  452,  309,
   54,  310,  311, 1191,  315,  376,  316,  357,  698,  393,
  394,  981,  275,  982,  328,   81,  329,  163,  676,   35,
   35,    5,  684,  688,  334,  566, 1270,  336,  359,  340,
    5, 1194, 1392, 1394,  874,  634,   89,  878,  357,  695,
  697, 1090,  342,  452,  740,   35,   35,  711, 1117,  713,
 1402,   80, 1192,  373,  534,  416,  453,  536,  898,  464,
  417,  731,  418,  733,  534,  720,  550,  536,  419,  420,
 1060,  163,  812,  841,   81, 1300, 1301,   35, 1303,  371,
 1195,  163,   80,  735,  735,  465,  659,  359,   87, 1322,
 1155,  342, 1329, 1330, 1118, 1119, 1117, 1159, 1148,   91,
  741,  282, 1081, 1082,  248,   81,  508, 1345,  249, 1084,
  702,  469,  376,  469,  376,  464,  376,  376,  359,  376,
 1155,  376,  550,  718,  905,  371,  995,  442, 1148,  905,
  484,  905,  639,  660,  905,  905,  754,  905,  905,  262,
  421,  465, 1118, 1119, 1149, 1150,  270,  703, 1210,  142,
  271,  443, 1211,  274,   79,  905,  639,  660,  460,  281,
  768,  465,   81,  376,   80,  376,  448,  469,  376,  250,
  334,  690,  373,  803, 1149, 1150,  484,   35,  444,   81,
  913, 1120, 1043,  639,  908,  796,  360,   81,  264,  908,
  676,  908,  730,  160,  908,  908, 1063,  908,  908,  142,
  272,  688,  275,  899,   78, 1140,  163,  163,  899,  905,
  899,  504, 1121,  899,  899,  908,  899,  899,  282,  267,
 1122,  661,  821,  519,  261, 1099, 1115,  901,   80, 1120,
  820, 1151,  901,  831,  901,  832,  268,  901,  901,   81,
  901,  901, 1027,  160,  834,  661,  556,  163,  160,  163,
 1099,   81,  732,  349,   35,  557,  349,  640,  822,  566,
 1121, 1151, 1152,  535,  566,  843,  254,  676, 1122,  908,
 1153,  317,  878,  318, 1115,   95, 1146,   97,  859,  860,
   98,  640,  349,  261,  261,  102,  994, 1057,  899,  106,
  349,  514, 1152,  558,  349,  535,  874,  875,  109,  261,
 1153,  480,  559,  669,  515,  114, 1146,  349,  640, 1123,
  116,  273,  901,   80,  119,  484,  535,  364,  902,  407,
  887,  516,  943,  676,   35, 1080,  121,  907,  122,   83,
  263,  408,  124,  284,  944,  867,   81,  915,  416,  349,
  131,  132,  337,  417,  135,  418,  773,  255,  160,  359,
  494,  419,  420,  774,  495,   35,  895, 1123, 1133, 1154,
   54,  895,   57,  895,  286,  655,  895,  895,  142,  895,
  895,   54,  931,   80,  933, 1333,  935, 1180,  397,  398,
  666,  347,  348,  349,  350,  351,  352,  353,  354, 1154,
  349,  261,  399,  400,   54,  762,   81,  762,  349,  762,
  337,  612,  349,  612,  666,  243,  696,   54,  244,  359,
  363,   35,   54,  666,   35,  349,  676,   54,  574,   54,
   54,   54,   54,  431,   87,   54,  454,   54,  261,   52,
  508,   54,  589,  357,  376,  591,  592, 1386, 1016,  404,
  639,  895,  163,   54,  640,  403,   54,  349,   54,  720,
 1017,  349,  160,  987,  261,  989,  364,  990,  295,  349,
  295,  634,  349,  349,  261,  295,  672,  635,  824,   54,
  673,  261,   35, 1405,  314, 1177,  349,   80,  543,  160,
  782,  337, 1177,  142,  142,  544,  641,  663,  160, 1422,
 1423,  641, 1235,  762,  480,  641,  663,  545,  405,  286,
   81,  406,  543,  662,  261,  241, 1034,  676,  286,  544,
  641,   21,  662,  359, 1041,  589,  636,  867,  637, 1001,
  589,  545,  589,  589,  589,  589,  589,  589,  589,  589,
  589,  589,  589,  409,  261,  261,  480,  641,  342,  480,
  589,  342,  589,   81,  589,  335,  589,  589,  589,  687,
  822,  335,  534,  495,  318,  536,  641, 1067,  336,  734,
  261,  261,  589,  640,  878,  163,  926,   21,  743,  163,
   69,   69,  589,  589,   69,   70,  748,  480,   35,   70,
  748,  416,  395,  396,  534,  589,  417,  536,  418, 1086,
  990,  412,  261, 1216,  419,  420,  434,  163,  163, 1223,
  589,  163,  856,  857,  163,  534, 1229,  455,  536, 1094,
  480,   72,  573,   72,  440,  349,  349, 1001,  349,  349,
   61,  160,  163,  462,  586,  587,  588,  401,  402,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  463, 1098, 1114, 1038, 1039,
  354, 1161,  470,  853,  354,  853,  349,  134,  744,  134,
  744,  474,  261, 1182,  134,  388,  389,  390,   59, 1094,
  751, 1098,  751,  354,  751,  160,   35,  354,  482,  349,
  354,  483,  354, 1188,  365,  160,  829,  354,  753,  587,
  753,   60,  261, 1395, 1396, 1114,  252, 1098,  354, 1189,
 1190,   81,  765,   35,   61, 1227,  185,  497,  185,   63,
  185,  874,  874,  274,   64,  368,   65,   66,   67,   68,
 1227,  354,  527,  173,   69,  173, 1219, 1098,   70, 1222,
  510,  180, 1236,  180,  369,  370,  573, 1278,  513, 1279,
   71,  529,  364,   72,  539,   73,  364,  626,  349,  364,
  181,  364,  181,  197,  371,  197,  364,  197,  595,  596,
  597,  598,  275,   35,   35,  372,   74,  554,  203,  261,
  203,   35,  587,  139,  174,  139,  174,  587,  560,  587,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  729,  534,  534,   35,   35,  614,   35,  587,  300,  587,
  300,  587, 1206,  587,  587,  587,  146,  307,  146,  307,
  160,  160,  641,  641,  587,  621,  676, 1182, 1206,  587,
   35, 1215,  622,   35, 1206,  952,  953,  629,  480,  587,
  587, 1206,  599,  600,   53,  631,  364,  593,  594,  261,
  641,  643,  587,  371,  656, 1362,  666,  667,  668,  670,
  712,  160,  671,  160,  693, 1313,  510,  587,  694,  349,
  364,  349,  510,  707,  364,  709,  371,  364,  364,  364,
  261,  708, 1340,  710,  364,  714,  719,  725,  676,  371,
  349,  349,  727,  728,  371, 1352, 1354,  248,  738,  371,
  739,  371,  371,  371,  371,  743,  753,  744,  750,  371,
  349,  752,   30,  371,  759,  762,  764,  371,  349,  765,
  787,  349, 1340, 1340,  676,  371,  788,  780,  371,  789,
  371,  790,  793, 1410, 1410,  794,  261,  795,  802,  261,
 1418, 1418,  797,  240,  817,  566,  566,  813,  818,  827,
  826,  371,  829,  829,  825,  836,  838,  847,  852,  854,
  829,  829,  829,  829,  829,  858,  829,  829,  861,  829,
  829,  829,  829,  829,  829,  829,  829,    4, 1340,  870,
  879,  829,  892,  829,  829,  829,  829,  829,  829,  893,
  894,  829,  895,  901,  903,  829,  829,  261,  829,  829,
  829,  905,  912,  500,  919,  929,  371,  921,  923,  950,
  829,  928,  829,  954,  829,  829,  961,  955,  829,  962,
  829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
  829,  829,  963,  829,  967,  772,  829,  829,  968,  970,
  829,  829,  511,  980,  822,  427,  986,  427,  511,  985,
  988,  993,  998,  999, 1009, 1019,  160,  573, 1015,  829,
  829, 1020, 1018,  829, 1037, 1021,  427,  427,  829,  829,
  829,  829,  829, 1028, 1033, 1040,  829, 1042,  829, 1061,
 1045, 1047, 1048, 1063,  829,  829,  427, 1055, 1049, 1066,
 1059, 1072, 1076, 1077,  427, 1075, 1085,  427, 1078, 1131,
 1132,   53, 1089,  261, 1134,   55, 1135, 1137,  377,  829,
  829,  829,  829, 1144,  829, 1163,   55, 1160, 1184, 1186,
  829,   55, 1196, 1209, 1212,   55, 1225, 1228,   55,  378,
  379,  380,  381,  382,  383,  384,  385,  386,  387, 1231,
   55,   55, 1262, 1264, 1265,   55,   55, 1267, 1214, 1268,
 1269,   55, 1215,   55,   55,   55,   55, 1273, 1224, 1232,
 1275,   55, 1281, 1271, 1234,   55, 1276,   55,   30,   30,
 1293, 1286, 1289,   30, 1294, 1323, 1334,   55, 1296,  160,
   55, 1304,   55,  160,   30, 1305,   55, 1308, 1372,   30,
 1318, 1325, 1337,   30, 1335, 1338,   30, 1344, 1347,   30,
 1348,  261, 1359,   55, 1358, 1361, 1363, 1364,   30,   30,
 1366,  160,  160,   30,   30,  160, 1367, 1378,  160,   30,
 1379,   30,   30,   30,   30, 1383, 1387, 1397,  261,   30,
 1388, 1382, 1381,   30, 1403,   30,  160, 1404, 1424, 1425,
 1426,    7,   32,  545,   33,   30,  729,   30,   30,   34,
   30,  827,   25,  613,   30,  505,  327,  224,  797,  100,
  506,  504,  464,  614,  801,   32,  530,  835,   33,  673,
   30,   30,  747,  747,  755,  802,   30,   30,  756,  776,
  662,  804,  777,  662,  331,  683,  356,  641,  261,  261,
  806,  772,  772,  923,  349,  641,  261,  237,  142,  772,
  772,  772,  772,  772,  124,  772,  772,  303,  772,  772,
  772,  772,  772,  772,  772,  149,  143,  125,  261,  261,
  772,  261,  772,  772,  772,  772,  772,  772,  304,  150,
  772,  940,   88,  266,  772,  772,  777,  772,  772,  772,
 1138,  778, 1185, 1349, 1380,  261,  437, 1389,  261,  772,
 1365,  772, 1336,  772,  772, 1331,  884,  772, 1203,  772,
  772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
  772,  889,  772,  920,  890,  772,  772, 1142, 1217,  772,
  772, 1420, 1145, 1413,  891, 1360, 1355, 1353, 1412, 1073,
 1280, 1207, 1000, 1074,  704,  911,  805,  840,  772,  772,
  842,  737,  772,  561,  779,  971,  601,  772,  772,  772,
  772,  772,  801,  602,  604,  772,    7,  772,  603,  605,
  837, 1051,  606,  772,  772, 1164,  984, 1129, 1062,  411,
  966, 1029,  956, 1024, 1035, 1031,  924,  930, 1213, 1087,
  620,  699,    0,    0,    0,    0,    0,    0,  772,  772,
  772,  772,    0,  772,    0,   30,   30,    0,    0,  772,
   30,    0,    0,    0,   30,    0,   30,    0,    0,   30,
    0,   30,   30,    0,   30,    0,   30,    0,   30,    0,
   30,   30,   30,   30,    0,    0,   30,   30,    0,    0,
    0,    0,   30,    0,   30,   30,   30,    0,    0,   30,
   30,   30,    0,   30,    0,    0,   30,    0,   30,   30,
   30,   30,    0,    0,    0,   30,   30,   30,    0,    0,
   30,   30,   30,    0,    0,    0,    0,    0,    0,   30,
   30,    0,   30,   30,   30,   30,   30,   30,    0,    0,
    0,   30,    0,    0,    0,    0,    0,    0,    0,    0,
  923,    0,    0,    0,   54,    0,    0,   30,   30,    0,
    0,    0,    0,   30,   30,   54,    0,    0,    0,    0,
   54,    0,   30,    0,   54,    0,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   54,    0,    0,    0,   54,   54,    0,    0,    0,    0,
   54,    0,   54,   54,   54,   54,    0,    0,    0,    0,
   54,    0,    0,   30,   54,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,    0,   54,
  920,   54,    0,    0,   54,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   54,    0,    0,    0,    0,
   54,    0,   54,    0,   54,    0,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   54,    0,    0,    0,   54,   54,    0,   54,    0,    0,
   54,    0,   54,   54,   54,   54,    0,    0,   54,    0,
   54,    0,    0,   54,   54,    0,   54,   54,    0,    0,
   54,    0,    0,    0,    0,    0,   54,    0,    0,   54,
    0,   54,   54,   54,    0,   54,    0,   54,   54,    0,
    0,    0,    0,   54,    0,   54,   54,   54,   54,    0,
    0,    0,   54,   54,    0,  515,    0,   54,    0,   54,
  515,  515,    0,    0,    0,    0,    0,    0,    0,   54,
    0,    0,   54,    0,   54,    0,    0,    0,   54,    0,
    0,    0,    0,  515,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  515,    0,   54,  515,  515,    0,    0,
    0,  515,    0,    0,  515,    0,  515,    0,  515,  515,
  515,  515,    0,    0,    0,    0,  515,    0,    0,    0,
  515,    0,    0,    0,  515,    0,    0,    0,    0,    0,
    0,    0,  515,    0,    0,  515,    0,  515,  515,    0,
    0,    0,    0,  515,    0,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,    0,    0,  515,    0,
    0,    0,  515,  515,    0,  515,  515,  515,  515,  515,
  515,  515,    0,  515,  515,    0,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,    0,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,    0,
    0,  515,    0,  515,  349,  515,    0,    0,  515,  349,
  349,    0,    0,  515,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  349,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  349,    0,    0,  349,  349,    0,    0,    0,
  349,    0,    0,  349,    0,  349,    0,  349,  349,  349,
  349,    0,    0,    0,    0,  349,    0,    0,    0,  349,
    0,    0,    0,  349,    0,    0,    0,    0,    0,    0,
    0,  349,    0,    0,  349,    0,  349,  349,    0,    0,
    0,    0,  349,    0,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,    0,  349,    0,    0,
    0,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,    0,  349,  349,    0,    0,  349,  349,  349,  349,
  349,    0,    0,  349,  349,    0,    0,    0,  349,  349,
  349,  349,  349,  349,  349,  349,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  349,    0,    0,
  349,    0,  349,    0,  349,   93,    0,  349,    0,    0,
    0,    0,  349,   94,   95,   96,   97,    0,    0,   98,
   99,    0,  100,  101,  102,  103,  104,  105,  106,    0,
    0,    0,    0,    0,  107,    0,  108,  109,  110,  111,
  112,  113,    0,    0,  114,    0,    0,    0,  115,  116,
    0,  117,  118,  119,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,  121,    0,  122,  123,    0,
    0,  124,    0,  125,  126,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  136,    0,  137,    0,    0,  138,
  139,    0,    0,  140,  141,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  342,    0,    0,    0,    0,
  342,  342,  142,    0,    0,    0,  143,    0,    0,    0,
    0,  144,  145,  146,  147,  148,    0,    0,    0,  149,
    0,  150,    0,  342,    0,    0,    0,  151,  152,    0,
    0,    0,    0,  342,    0,    0,  342,  342,    0,    0,
    0,  342,    0,    0,  342,    0,  342,    0,  342,  342,
  342,  342,  153,  154,  155,  156,  342,    0,    0,    0,
  342,    0,    0,  240,  342,    0,    0,    0,    0,    0,
    0,    0,  342,    0,    0,  342,    0,  342,  342,    0,
    0,    0,    0,  342,    0,  342,  342,  342,  342,  342,
  342,  342,  342,  342,  342,  342,    0,    0,  342,    0,
    0,    0,  342,  342,  342,  342,  342,  342,    0,  342,
  342,  342,    0,  342,  342,    0,    0,  342,  342,  342,
  342,    0,    0,    0,  342,  342,    0,    0,    0,  342,
  342,  342,  342,  342,  342,  342,  342,  737,    0,    0,
    0,    0,  737,  737,    0,    0,    0,    0,  342,    0,
    0,  342,    0,  342,    0,  342,    0,    0,  342,    0,
    0,    0,    0,  342,    0,  737,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  737,    0,    0,  737,  737,
    0,    0,    0,  737,    0,    0,  737,    0,  737,    0,
  737,  737,  737,  737,    0,    0,    0,    0,  737,    0,
    0,    0,  737,    0,    0,    0,  737,    0,    0,    0,
    0,    0,    0,    0,  737,    0,  349,  737,    0,  737,
  737,    0,  349,    0,    0,  737,    0,  737,  737,  737,
  737,  737,  737,  737,  737,  737,  737,  737,    0,    0,
  737,    0,    0,    0,  737,  737,  737,  737,  737,  737,
    0,  737,  737,  737,    0,  737,  737,    0,  349,  737,
  737,  737,  737,    0,    0,    0,  737,  737,    0,    0,
    0,  737,  737,  737,  737,  737,  737,  737,  737,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  737,    0,    0,  737,    0,  737,    0,  737,    0,  349,
  737,    0,    0,    0,  349,  737,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,    0,    0,
    0,    0,    0,    0,  349,  349,  349,  349,  349,  349,
  349,  349,  349,    0,  349,  349,    0,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  370,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  370,    0,  379,    0,  349,    0,  349,  379,  379,  349,
    0,    0,    0,  370,  349,    0,    0,    0,  370,    0,
    0,  247,    0,  370,    0,  370,  370,  370,  370,    0,
  379,    0,    0,  370,    0,    0,    0,  370,    0,    0,
  379,  370,    0,  379,  379,    0,    0,    0,  379,  370,
    0,  379,  370,  379,  370,  379,  379,  379,  379,    0,
    0,    0,    0,  379,    0,    0,    0,  379,    0,    0,
    0,  379,    0,    0,    0,  370,    0,    0,    0,  379,
    0,  517,  379,    0,  379,  379,    0,  517,    0,    0,
  379,    0,  379,  379,  379,  379,  379,  379,  379,  379,
  379,  379,  379,    0,    0,  379,    0,    0,    0,  379,
  379,    0,  379,  379,  379,    0,  379,  379,  379,    0,
  379,  379,    0,  517,  379,  379,  379,  379,    0,    0,
  370,  379,  379,    0,    0,    0,  379,  379,  379,  379,
  379,  379,  379,  379,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  379,    0,    0,  379,    0,
  379,    0,    0,    0,  517,    0,    0,    0,    0,  517,
  379,  517,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,    0,    0,    0,    0,    0,    0,  517,  517,
  517,  517,  517,  517,  517,  517,  517,  517,    0,  517,
  517,    0,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,    0,  517,  517,  517,  517,  517,  517,  517,
  517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
  517,  517,  517,  517,  517,    0,  513,  700,    0,    0,
    0,  517,  513,    0,    0,    0,   95,    0,   97,  517,
    0,   98,    0,    0,    0,    0,  102,    0,    0,    0,
  106,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,    0,    0,  114,    0,  513,    0,
    0,  116,    0,    0,    0,  119,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  121,    0,  122,
    0,    0,    0,  124,    0,    0,    0,    0,    0,    0,
    0,  131,  132,    0,    0,  135,    0,    0,  436,  513,
    0,    0,    0,    0,  513,    0,  513,  513,  513,  513,
  513,  513,  513,  513,  513,  513,  513,    0,    0,    0,
    0,    0,    0,  513,  513,    0,  513,  513,  513,  513,
  513,  513,  513,    0,  513,  513,    0,  513,  513,  513,
  513,  513,  513,  513,  513,  513,  513,    0,  513,  513,
  513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
  513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
    0,  521,  767,    0,    0,  701,  513,  521,    0,  513,
    0,   95,    0,   97,  513,    0,   98,    0,    0,    0,
    0,  102,    0,    0,    0,  106,    0,    0,    0,    0,
    0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
    0,  114,    0,  521,    0,    0,  116,    0,    0,    0,
  119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  121,    0,  122,    0,    0,    0,  124,    0,
    0,    0,    0,    0,    0,    0,  131,  132,    0,    0,
  135,    0,    0,  255,  521,    0,    0,    0,    0,  521,
    0,  521,  521,  521,  521,  521,  521,  521,  521,  521,
  521,  521,    0,    0,    0,    0,    0,    0,    0,  521,
    0,  521,  521,  521,  521,  521,  521,  521,    0,  521,
  521,    0,  521,  521,  521,  521,  521,  521,  521,  521,
  521,  521,    0,  521,  521,  521,  521,  521,  521,  521,
  521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
  521,  521,  521,  521,  521,    0,  448,  819,    0,    0,
   87,  521,  448,    0,  521,    0,   95,    0,   97,  521,
    0,   98,    0,    0,    0,    0,  102,    0,    0,    0,
  106,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,    0,    0,  114,    0,  448,    0,
    0,  116,    0,    0,    0,  119,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  121,    0,  122,
    0,    0,    0,  124,    0,    0,    0,    0,    0,    0,
    0,  131,  132,    0,    0,  135,    0,    0,  255,  448,
    0,    0,    0,    0,  448,    0,  448,  448,  448,  448,
  448,  448,  448,  448,  448,  448,  448,    0,    0,    0,
    0,    0,    0,    0,  448,    0,  448,  448,  448,  448,
  448,  448,  448,    0,  448,  448,    0,  448,  448,  448,
  448,  448,  448,  448,  448,  448,  448,    0,  448,  448,
  448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
  448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
    0,  409, 1005,    0,    0,   87,  448,  409,    0,  448,
    0,   95,    0,   97,  448,    0,   98,    0,    0,    0,
    0,  102,    0,    0,    0,  106,    0,    0,    0,    0,
    0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
    0,  114,    0,  409,    0,    0,  116,    0,    0,    0,
  119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  121,    0,  122,    0,    0,    0,  124,    0,
    0,    0,    0,    0,    0,    0,  131,  132,    0,    0,
  135,    0,    0,  255,  409,    0,    0,    0,    0,  409,
    0,  409,  409,  409,  409,  409,  409,  409,  409,  409,
  409,  409,    0,    0,    0,    0,    0,    0,    0,  409,
    0,  409,  409,  409,  409,  409,  409,  409,    0,  409,
  595,    0,  409,  409,  409,  409,  409,  409,  409,  409,
  409,  409,    0,  409,  409,  409,  409,  409,  409,  409,
  409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
  409,  409,  409,  409,  409,    0,  550,    0,    0,    0,
   87,  409,  550,    0,  409,    0,    0,    0,    0,  409,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  550,    0,
    0,    0,    0,  595,    0,    0,    0,    0,  595,    0,
  595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
  595,    0,    0,    0,    0,    0,    0,    0,  595,    0,
  595,    0,  595,    0,  595,  595,  595,    0,    0,  550,
    0,    0,    0,  593,  550,    0,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,    0,    0,    0,
    0,    0,    0,    0,  550,    0,  550,    0,  550,    0,
  550,  550,  550,    0,  550,  550,    0,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,    0,  595,    0,
  550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  349,  550,
    0,    0,    0,    0,  349,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  550,    0,  593,    0,    0,    0,
    0,  593,    0,  593,  593,  593,  593,  593,  593,  593,
  593,  593,  593,  593,    0,    0,  349,    0,    0,    0,
  349,  593,    0,  593,    0,  593,    0,  593,  593,  593,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  593,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  374,    0,    0,
    0,  349,    0,  374,    0,    0,  349,    0,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
    0,  593,    0,    0,    0,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  374,  349,  349,    0,  374,
  349,  349,  349,  349,  349,    0,    0,  349,  349,    0,
    0,    0,  349,  349,  349,  349,  349,  349,  349,  349,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  349,    0,    0,  349,    0,  349,    0,  349,    0,
  374,  349,    0,    0,    0,  374,  349,  374,  374,  374,
  374,  374,  374,  374,  374,  374,  374,  374,    0,    0,
  562,    0,    0,    0,  374,  374,  562,  374,  374,  374,
    0,  374,  374,  374,    0,  374,  374,    0,    0,  374,
  374,  374,  374,    0,    0,    0,  374,  374,    0,    0,
    0,  374,  374,  374,  374,  374,  374,  374,  374,    0,
    0,    0,  562,    0,    0,    0,    0,    0,    0,    0,
  374,    0,    0,  374,    0,  374,    0,    0,    0,    0,
    0,    0,    0,    0,  566,  374,    0,    0,    0,    0,
  566,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  562,    0,    0,    0,    0,  562,    0,
  562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
  562,    0,    0,    0,    0,    0,  566,    0,  562,    0,
  562,    0,  562,    0,  562,  562,  562,    0,  562,  562,
    0,    0,  562,  562,  562,  562,  562,  562,  562,  562,
  562,    0,    0,    0,  562,  562,  562,  562,  562,  562,
  562,  562,    0,  569,    0,    0,    0,  566,    0,  569,
    0,    0,  566,  562,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,    0,    0,    0,  562,    0,
    0,    0,  566,    0,  566,    0,  566,    0,  566,  566,
  566,    0,  566,  566,    0,  569,  566,  566,  566,  566,
    0,    0,    0,  566,  566,    0,    0,    0,  566,  566,
  566,  566,  566,  566,  566,  566,    0,  567,    0,    0,
    0,    0,    0,  567,    0,    0,    0,  566,    0,    0,
    0,    0,    0,    0,    0,    0,  569,    0,    0,    0,
    0,  569,  566,  569,  569,  569,  569,  569,  569,  569,
  569,  569,  569,  569,    0,    0,    0,    0,    0,  567,
    0,  569,    0,  569,    0,  569,    0,  569,  569,  569,
    0,  569,  569,    0,    0,  569,  569,  569,  569,    0,
    0,    0,  569,  569,    0,    0,    0,  569,  569,  569,
  569,  569,  569,  569,  569,    0,  568,    0,    0,    0,
  567,    0,  568,    0,    0,  567,  569,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,    0,    0,
    0,  569,    0,    0,    0,  567,    0,  567,    0,  567,
    0,  567,  567,  567,    0,  567,  567,    0,  568,  567,
  567,  567,  567,    0,    0,    0,  567,  567,    0,    0,
    0,  567,  567,  567,  567,  567,  567,  567,  567,    0,
  572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  567,    0,    0,    0,    0,    0,    0,    0,    0,  568,
    0,    0,    0,    0,  568,  567,  568,  568,  568,  568,
  568,  568,  568,  568,  568,  568,  568,    0,    0,    0,
    0,    0,    0,    0,  568,    0,  568,    0,  568,    0,
  568,  568,  568,    0,  568,  568,    0,    0,  568,  568,
  568,  568,    0,    0,  573,  568,  568,    0,    0,    0,
  568,  568,  568,  568,  568,  568,  568,  568,    0,    0,
    0,    0,    0,  572,    0,    0,    0,    0,  572,  568,
  572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
  572,    0,    0,    0,  568,    0,    0,    0,  572,    0,
  572,    0,  572,    0,  572,  572,  572,    0,    0,    0,
    0,    0,  572,  572,  572,  572,    0,    0,  574,  572,
  572,    0,    0,    0,  572,  572,  572,  572,  572,  572,
  572,  572,    0,    0,    0,    0,    0,  573,    0,    0,
    0,    0,  573,  572,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,    0,    0,    0,  572,    0,
    0,    0,  573,    0,  573,    0,  573,    0,  573,  573,
  573,    0,    0,    0,    0,    0,  573,  573,  573,  573,
    0,    0,  575,  573,  573,    0,    0,    0,  573,  573,
  573,  573,  573,  573,  573,  573,    0,    0,    0,    0,
    0,  574,    0,    0,    0,    0,  574,  573,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,    0,
    0,    0,  573,    0,    0,    0,  574,    0,  574,    0,
  574,    0,  574,  574,  574,    0,    0,    0,    0,    0,
  574,  574,  574,  574,    0,    0,  576,  574,  574,    0,
    0,    0,  574,  574,  574,  574,  574,  574,  574,  574,
    0,    0,    0,    0,    0,  575,    0,    0,    0,    0,
  575,  574,  575,  575,  575,  575,  575,  575,  575,  575,
  575,  575,  575,    0,    0,    0,  574,    0,    0,    0,
  575,    0,  575,    0,  575,    0,  575,  575,  575,    0,
    0,    0,    0,    0,  575,  575,  575,  575,    0,    0,
  577,  575,  575,    0,    0,    0,    0,    0,  575,  575,
  575,  575,  575,  575,    0,    0,    0,    0,    0,  576,
    0,    0,    0,    0,  576,  575,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,    0,    0,    0,
  575,    0,    0,    0,  576,    0,  576,    0,  576,    0,
  576,  576,  576,    0,    0,    0,    0,    0,  576,  576,
  576,  576,    0,    0,  578,  576,  576,    0,    0,    0,
    0,    0,  576,  576,  576,  576,  576,  576,    0,    0,
    0,    0,    0,  577,    0,    0,    0,    0,  577,  576,
  577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
  577,    0,    0,    0,  576,    0,    0,    0,  577,    0,
  577,    0,  577,    0,  577,  577,  577,    0,    0,    0,
    0,    0,  577,  577,  577,  577,    0,    0,  579,  577,
  577,    0,    0,    0,    0,    0,  577,  577,  577,  577,
  577,  577,    0,    0,    0,    0,    0,  578,    0,    0,
    0,    0,  578,  577,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,  349,    0,    0,  577,    0,
    0,  349,  578,    0,  578,    0,  578,    0,  578,  578,
  578,    0,    0,    0,    0,    0,  578,  578,  578,  578,
    0,    0,    0,  578,  578,    0,    0,    0,    0,    0,
  578,  578,  578,  578,  578,  578,    0,  349,    0,    0,
    0,  579,    0,    0,    0,    0,  579,  578,  579,  579,
  579,  579,  579,  579,  579,  579,  579,  579,  579,    0,
    0,    0,  578,    0,    0,    0,  579,    0,  579,    0,
  579,    0,  579,  579,  579,    0,  580,    0,    0,    0,
  579,  579,  579,  579,    0,    0,    0,  579,  579,    0,
    0,    0,    0,    0,  579,  579,  579,  579,  579,  579,
    0,    0,    0,  349,    0,    0,  349,    0,  349,  349,
    0,  579,    0,  349,  349,    0,    0,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  579,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,    0,    0,    0,
  581,    0,    0,    0,    0,    0,    0,  349,  349,    0,
    0,    0,    0,    0,    0,  349,    0,    0,  349,  580,
    0,    0,    0,  349,  580,    0,  580,  580,  580,  580,
  580,  580,  580,  580,  580,  580,  580,    0,    0,    0,
    0,    0,    0,    0,  580,    0,  580,    0,  580,    0,
  580,  580,  580,    0,    0,    0,    0,    0,    0,    0,
  580,  580,    0,    0,  582,  580,  580,    0,    0,    0,
    0,    0,    0,    0,  580,  580,  580,  580,    0,    0,
    0,    0,    0,  581,    0,    0,    0,    0,  581,  580,
  581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
  581,    0,    0,    0,  580,    0,    0,    0,  581,    0,
  581,    0,  581,    0,  581,  581,  581,    0,    0,    0,
    0,    0,    0,    0,  581,  581,    0,    0,  583,  581,
  581,    0,    0,    0,    0,    0,    0,    0,  581,  581,
  581,  581,    0,    0,    0,    0,    0,  582,    0,    0,
    0,    0,  582,  581,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,    0,    0,    0,  581,    0,
    0,    0,  582,    0,  582,    0,  582,    0,  582,  582,
  582,    0,    0,    0,    0,    0,    0,    0,  582,  582,
    0,    0,  584,  582,  582,    0,    0,    0,    0,    0,
    0,    0,  582,  582,  582,  582,    0,    0,    0,    0,
    0,  583,    0,    0,    0,    0,  583,  582,  583,  583,
  583,  583,  583,  583,  583,  583,  583,  583,  583,    0,
    0,    0,  582,    0,    0,    0,  583,    0,  583,    0,
  583,    0,  583,  583,  583,    0,    0,    0,    0,    0,
    0,    0,  583,  583,    0,    0,  585,  583,  583,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  583,  583,
    0,    0,    0,    0,    0,  584,    0,    0,    0,    0,
  584,  583,  584,  584,  584,  584,  584,  584,  584,  584,
  584,  584,  584,    0,    0,    0,  583,    0,    0,    0,
  584,    0,  584,    0,  584,    0,  584,  584,  584,    0,
    0,    0,    0,    0,    0,    0,  584,  584,    0,    0,
  586,  584,  584,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  584,  584,    0,    0,    0,    0,    0,  585,
    0,    0,    0,    0,  585,  584,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,    0,    0,    0,
  584,    0,    0,    0,  585,    0,  585,    0,  585,    0,
  585,  585,  585,    0,    0,    0,    0,    0,    0,    0,
    0,  585,    0,    0,  588,  585,  585,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  585,  585,    0,    0,
    0,    0,    0,  586,    0,    0,    0,    0,  586,  585,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,    0,    0,    0,  585,    0,    0,    0,  586,    0,
  586,    0,  586,    0,  586,  586,  586,    0,    0,    0,
    0,    0,    0,    0,    0,  586,    0,    0,  590,  586,
  586,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,  586,    0,    0,    0,    0,    0,  588,    0,    0,
    0,    0,  588,  586,  588,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,    0,    0,    0,  586,    0,
    0,    0,  588,    0,  588,    0,  588,    0,  588,  588,
  588,    0,    0,    0,    0,    0,    0,    0,    0,  588,
    0,    0,  591,    0,  588,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  588,  588,    0,    0,    0,    0,
    0,  590,    0,    0,    0,    0,  590,  588,  590,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,    0,
    0,    0,  588,    0,    0,    0,  590,    0,  590,    0,
  590,    0,  590,  590,  590,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  592,    0,  590,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  590,  590,
    0,    0,    0,    0,    0,  591,    0,    0,    0,    0,
  591,  590,  591,  591,  591,  591,  591,  591,  591,  591,
  591,  591,  591,    0,    0,    0,  590,    0,    0,    0,
  591,    0,  591,    0,  591,    0,  591,  591,  591,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  911,    0,  591,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  591,    0,    0,    0,    0,  349,  592,
    0,    0,    0,    0,  592,  591,  592,  592,  592,  592,
  592,  592,  592,  592,  592,  592,  592,    0,    0,    0,
  591,    0,    0,    0,  592,    0,  592,    0,  592,    0,
  592,  592,  592,    0,  349,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  592,    0,    0,    0,
    0,  406,    0,    0,    0,    0,    0,  592,    0,    0,
    0,    0,    0,  911,    0,    0,    0,    0,  911,  592,
  911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
    0,    0,    0,    0,  592,    0,    0,  406,  911,    0,
  911,    0,  911,  349,  911,  911,  911,    0,    0,    0,
    0,  349,    0,  349,    0,  349,    0,    0,  349,    0,
  349,  349,    0,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,    0,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,    0,    0,  911,    0,
  349,    0,  349,    0,  342,  349,  406,  406,  406,  406,
  349,  406,    0,  406,  406,  349,  406,  406,  406,  406,
  406,    0,  406,  406,  406,  406,   54,  406,  406,  406,
  406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
  406,  406,  406,  406,  406,  406,  406,  406,  406,   54,
    0,  349,    0,  342,    0,  406,    0,    0,  406,    0,
    0,    0,   54,  406,    0,    0,    0,   54,    0,    0,
    0,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,    0,   54,    0,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   54,    0,
    0,   54,    0,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  349,
  349,  349,  349,  349,   54,   54,   54,  349,  349,  212,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
    0,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,    0,    0,   93,    0,    0,    0,  349,
    0,    0,  349,   94,   95,   96,   97,  349,    0,   98,
   99,    0,  100,  101,  102,  103,  104,  105,  106,    0,
    0,    0,    0,    0,  107,    0,  108,  109,  110,  111,
  112,  113,    0,    0,  114,    0,    0,    0,  115,  116,
    0,  117,  118,  119,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,  121,    0,  122,  123,    0,
    0,  124,    0,  125,  126,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  136,    0,  137,    0,    0,  138,
  139,    0,    0,  140,  141,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  142,    0,    0,    0,  143,    0,    0,    0,
    0,  144,  145,  146,  147,  148,    0,    0,    0,  149,
    0,  150,    0,    0,    0,    0,    0,  151,  152,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  289,    0,
    0,    0,  153,  154,  155,  156,   94,   95,   96,   97,
    0,    0,   98,   99,    0,  100,  101,  102,  103,  104,
  105,  106,    0,    0,    0,    0,    0,  107,    0,  108,
  109,  110,  111,  112,  113,    0,    0,  114,    0,    0,
    0,  115,  116,    0,  117,  118,  119,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  120,    0,  121,    0,
  122,  123,    0,    0,  124,    0,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,    0,  137,
    0,    0,  138,  139,    0,    0,  140,  141,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  142,    0,    0,    0,  143,
    0,    0,    0,    0,  144,  145,  146,  147,  148,    0,
    0,    0,  149,    0,  150,    0,    0,    0,    0,    0,
  151,  152,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  530,    0,    0,    0,  153,  154,  155,  156,   94,
   95,   96,   97,    0,    0,   98,   99,    0,  100,  101,
  102,  103,  104,  105,  106,    0,    0,    0,    0,    0,
  107,    0,  108,  109,  110,  111,  112,  113,    0,    0,
  114,    0,    0,    0,  115,  116,    0,  117,  118,  119,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
    0,  121,    0,  122,  123,    0,    0,  124,    0,  125,
  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
  136,    0,  137,    0,    0,  138,  139,    0,    0,  140,
  141,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  142,    0,
    0,    0,  143,    0,    0,    0,    0,  144,  145,  146,
  147,  148,    0,    0,    0,  149,    0,  150,    0,    0,
    0,    0,    0,  151,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  916,    0,    0,    0,  153,  154,
  155,  156,  916,  916,  916,  916,    0,    0,  916,  916,
    0,  916,  916,  916,  916,  916,  916,  916,    0,    0,
    0,    0,    0,  916,    0,  916,  916,  916,  916,  916,
  916,    0,    0,  916,    0,    0,    0,  916,  916,    0,
  916,  916,  916,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  916,    0,  916,    0,  916,  916,    0,    0,
  916,    0,  916,  916,  916,  916,  916,  916,  916,  916,
  916,  916,  916,  916,    0,  916,    0,    0,  916,  916,
    0,    0,  916,  916,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  916,    0,    0,    0,  916,    0,    0,    0,    0,
  916,  916,  916,  916,  916,    0,    0,    0,  916,    0,
  916,    0,    0,    0,    0,    0,  916,  916,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  781,    0,    0,
    0,  916,  916,  916,  916,  781,  781,  781,  781,    0,
    0,  781,  781,    0,  781,  781,  781,  781,  781,  781,
  781,    0,    0,    0,    0,    0,  781,    0,  781,  781,
  781,  781,  781,  781,    0,    0,  781,    0,    0,    0,
  781,  781,    0,  781,  781,  781,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  781,    0,  781,    0,  781,
  781,    0,    0,  781,    0,  781,  781,  781,  781,  781,
  781,  781,  781,  781,  781,  781,  781,    0,  781,    0,
    0,  781,  781,    0,    0,  781,  781,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  781,    0,    0,    0,  781,    0,
    0,    0,    0,  781,  781,  781,  781,  781,    0,    0,
    0,  781,    0,  781,    0,    0,    0,    0,    0,  781,
  781,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  674,    0,    0,    0,  781,  781,  781,  781,   94,   95,
    0,   97,    0,    0,   98,  278,    0,    0,    0,  102,
  103,  104,    0,  106,    0,    0,   95,    0,   97,  107,
    0,   98,  109,    0,    0,    0,  102,    0,    0,  114,
  106,    0,    0,    0,  116,    0,  117,  118,  119,  109,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
  121,  116,  122,  123,    0,  119,  124,    0,    0,  126,
    0,  128,    0,  130,  131,  132,  279,  121,  135,  122,
    0,    0,    0,  124,    0,  139,    0,    0,  140,  141,
    0,  131,  132,    0,    0,  135,    0,    0,  255,    0,
    0,    0,    0,    0,    0,    0,    0,  497,  675,    0,
    0,  143,    0,    0,    0,    0,    0,  145,  146,  147,
  148,    0,    0,    0,  149,    0,  150,    0,    0,    0,
    0,    0,  151,  152,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  674,    0,    0,    0,  153,  323,  155,
  156,   94,   95,    0,   97,    0,    0,   98,  278,    0,
    0,    0,  102,  103,  104,  341,  106,    0,    0,    0,
    0,    0,  107,    0,   59,  109,    0,    0,    0,    0,
    0,    0,  114,    0,    0,    0,    0,  116,    0,  117,
  118,  119,    0,    0,    0,    0,    0,   60,    0,    0,
    0,    0,    0,  121,    0,  122,  123,  844,    0,  124,
   61,    0,  126,    0,  128,   63,  130,  131,  132,  279,
   64,  135,   65,   66,   67,   68,    0,    0,  139,    0,
   69,  140,  141,    0,   70,    0,    0,    0, 1199,    0,
    0,    0,    0,    0,    0,    0,   71,    0,    0,   72,
  497,   73,    0,    0,  143,    0,    0,    0,    0,    0,
  145,  146,  147,  148,    0,    0,    0,  149,    0,  150,
    0,    0,   74,    0,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  657,    0,    0,    0,
  153,  323,  155,  156,   94,   95,    0,   97,    0,    0,
   98,  278,    0,    0,    0,  102,  103,  104,    0,  106,
    0,    0,    0,    0,    0,  107,    0, 1200,  109,    0,
    0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
  116,    0,  117,  118,  119,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  121,    0,  122,  123,
    0,    0,  124,    0,    0,  126,    0,  128,    0,  130,
  131,  132,  279,    0,  135,    0,    0,  137,    0,    0,
    0,  139,    0,    0,  140,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,    0,    0,  145,  146,  147,  148,    0,    0,    0,
  149,    0,  150,    0,    0,    0,    0,    0,  151,  152,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  674,
    0,    0,    0,  153,  323,  155,  156,   94,   95,    0,
   97,    0,    0,   98,  278,    0,    0,    0,  102,  103,
  104,    0,  106,    0,    0,   95,    0,   97,  107,    0,
   98,  109,    0,    0,    0,  102,    0,    0,  114,  106,
    0,    0,    0,  116,    0,  117,  118,  119,  109,    0,
    0,    0,    0,    0,    0,  114,    0,    0,    0,  121,
  116,  122,  123,    0,  119,  124,    0,    0,  126,    0,
  128,    0,  130,  131,  132,  279,  121,  135,  122,    0,
    0,    0,  124,    0,  139,    0,    0,  140,  141,    0,
  131,  132,    0,    0,  135,    0,    0,  255,    0,    0,
    0,    0,    0,    0,    0,    0,  497,    0,    0,    0,
  143,    0,    0,    0,    0,    0,  145,  146,  147,  148,
    0,    0,    0,  149,    0,  150,    0,    0,    0,    0,
    0,  151,  152,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  833,    0,    0,    0,  153,  323,  155,  156,
   94,   95,    0,   97,    0,    0,   98,  278,    0,    0,
    0,  102,  103,  104,  343,  106,    0,    0,   95,    0,
   97,  107,    0,   98,  109,    0,    0,    0,  102,    0,
    0,  114,  106,    0,    0,    0,  116,    0,  117,  118,
  119,  109,    0,    0,    0,    0,    0,    0,  114,    0,
    0,    0,  121,  116,  122,  123,    0,  119,  124,    0,
    0,  126,    0,  128,    0,  130,  131,  132,  279,  121,
  135,  122,    0,    0,    0,  124,    0,  139,    0,    0,
  140,  141,    0,  131,  132,    0,    0,  135,    0,    0,
  255,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  143,    0,    0,    0,    0,    0,  145,
  146,  147,  148,    0,    0,    0,  149,    0,  150,    0,
    0,    0,    0,    0,  151,  152,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  617,    0,    0,    0,  153,
  323,  155,  156,  617,  617,    0,  617,    0,    0,  617,
  617,    0,    0,    0,  617,  617,  617,   87,  617,    0,
    0,   95,    0,   97,  617,    0,   98,  617,    0,    0,
    0,  102,    0,    0,  617,  106,    0,    0,    0,  617,
    0,  617,  617,  617,  109,    0,    0,    0,    0,    0,
    0,  114,    0,    0,    0,  617,  116,  617,  617,    0,
  119,  617,    0,    0,  617,    0,  617,    0,  617,  617,
  617,  617,  121,  617,  122,    0,    0,    0,  124,    0,
  617,    0,    0,  617,  617,    0,  131,  132,    0,    0,
  135,    0,    0,  436,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  617,    0,    0,    0,
    0,    0,  617,  617,  617,  617,    0,    0,    0,  617,
    0,  617,    0,    0,    0,    0,    0,  617,  617,    0,
    0,    0,    0,    0,    0,   94,   95,    0,   97,    0,
    0,   98,  278,    0,    0,    0,  102,  103,  104,    0,
  106,    0,  617,  617,  617,  617,  107,    0,    0,  109,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
   87,  116,    0,  117,  118,  119,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  121,    0,  122,
  123,    0,    0,  124,    0,    0,  126,    0,  128,    0,
  130,  131,  132,  279,    0,  135,    0,    0,    0,    0,
    0,    0,  139,    0,    0,  140,  141,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  680,  910,    0,    0,  143,    0,
    0,    0,    0,    0,  145,  146,  147,  148,    0,    0,
    0,  149,    0,  150,    0,    0,    0,    0,    0,  151,
  152,    0,    0,    0,    0,    0,    0,   94,   95,    0,
   97,    0,    0,   98,  278,    0,    0,    0,  102,  103,
  104,    0,  106,    0,  153,  681,  155,  156,  107,    0,
   30,  109,   30,    0,  682,    0,    0,    0,  114,    0,
    0,    0,    0,  116,    0,  117,  118,  119,    0,    0,
    0,    0,    0,   30,    0,    0,    0,    0,    0,  121,
    0,  122,  123,    0,    0,  124,   30,    0,  126,    0,
  128,   30,  130,  131,  132,  279,   30,  135,   30,   30,
   30,   30,    0,    0,  139,    0,   30,  140,  141,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   30,    0,    0,   30,  680,   30,    0,    0,
  143,    0,    0,    0,    0,    0,  145,  146,  147,  148,
    0,    0,    0,  149,    0,  150,    0,    0,   30,    0,
    0,  151,  152,   30,   30,    0,    0,    0,    0,  349,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  487,    0,    0,  153,  681,  155,  156,
    0,   94,   95,    0,   97,    0,  682,   98,  278,    0,
    0,    0,  102,  103,  104,  349,  106,    0,    0,    0,
    0,    0,  107,    0,    0,  109,    0,    0,    0,    0,
    0,    0,  114,    0,    0,    0,    0,  116,    0,  117,
  118,  119,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  121,    0,  122,  123,    0,    0,  124,
    0,    0,  126,    0,  128,    0,  130,  131,  132,  279,
    0,  135,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  349,  349,  349,  349,    0,    0,
    0,  349,  349,    0,    0,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  143,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  349,  349,    0,    0,    0,
    0,    0,    0,  349,    0,    0,  349,    0,    0,    0,
    0,    0,    0,   55,    0,   55,    0,   55,    0,   55,
  153,  488,   55,    0,   55,   55,    0,   55,    0,   55,
    0,   55,    0,   55,   55,   55,   55,    0,    0,   55,
   55,    0,    0,    0,    0,   55,   55,   55,   55,   55,
    0,    0,   55,   55,   55,    0,   55,    0,   55,   55,
   55,   55,   55,   55,   55,   55,    0,   55,   55,   55,
   55,    0,    0,   55,   55,   55,    0,   55,    0,    0,
    0,    0,   55,   55,    0,   55,   55,    0,   55,   55,
   55,    0,    0,    0,   55,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   55,   55,   55,    0,    0,    0,    0,    0,    0,
    0,    0,   54,    0,    0,   55,   54,    0,   54,    0,
    0,   54,    0,   54,   54,    0,   54,    0,   54,    0,
   54,    0,   54,   54,   54,   54,    0,    0,   54,   54,
    0,    0,    0,    0,   54,    0,   54,   54,   54,    0,
    0,   54,    0,   54,    0,   54,   55,    0,   54,    0,
   54,   54,   54,   54,    0,    0,    0,   54,   54,   54,
    0,    0,   54,   54,   54,    0,    0,    0,    0,    0,
    0,   54,   54,    0,   54,   54,   54,   54,   54,   54,
   54,    0,   54,   54,    0,   54,    0,   54,   54,    0,
   54,    0,   54,    0,   54,    0,   54,   54,   54,   54,
   54,    0,   54,   54,    0,   85,    0,    0,   54,    0,
   54,   54,   54,    0,   54,   54,    0,   54,    0,   54,
    0,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,    0,    0,   54,   54,    0,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,    0,   54,
    0,   54,   54,    0,   54,    0,   54,    0,   54,    0,
   54,   54,   54,   54,   54,    0,   54,   54,    0,   86,
    0,    0,   54,    0,   54,   54,   54,    0,   54,   54,
    0,   54,    0,   54,    0,    0,   54,    0,   54,   54,
   54,   54,    0,    0,    0,   54,   54,   54,    0,    0,
   54,   54,   54,    0,    0,    0,    0,    0,    0,   54,
   54,    0,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,    0,   54,    0,   54,   54,    0,   54,    0,
   54,    0,   54,    0,   54,   54,   54,   54,   54,    0,
   54,   54,    0,  108,    0,    0,   54,    0,   54,   54,
   54,    0,   54,   54,    0,   54,    0,   54,    0,    0,
   54,    0,   54,   54,   54,   54,    0,    0,    0,   54,
   54,   54,    0,    0,   54,   54,   54,    0,    0,    0,
    0,    0,    0,   54,   54,    0,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,    0,   54,    0,   54,
   54,    0,   54,    0,   54,    0,   54,    0,   54,   54,
   54,   54,   54,    0,   54,   54,    0,  109,    0,    0,
   54,    0,   54,   54,   54,    0,   54,   54,    0,   54,
    0,   54,    0,    0,   54,    0,   54,   54,   54,   54,
    0,    0,    0,   54,   54,   54,    0,    0,   54,   54,
   54,    0,    0,    0,    0,    0,    0,   54,   54,    0,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
    0,   54,    0,   54,   54,    0,   54,    0,   54,    0,
   54,    0,   54,   54,   54,   54,   54,    0,   54,   54,
    0,  230,    0,    0,   54,    0,   54,   54,   54,    0,
    0,   54,    0,   54,    0,   54,  349,    0,   54,    0,
   54,   54,   54,   54,    0,    0,    0,   54,   54,   54,
    0,    0,   54,   54,   54,    0,    0,    0,    0,  349,
    0,   54,   54,    0,   54,   54,   54,   54,   54,   54,
    0,   54,  349,   54,    0,    0,    0,  349,    0,    0,
  349,    0,  349,    0,  349,  349,  349,  349,    0,   54,
   54,    0,  349,    0,    0,  231,  349,    0,    0,    0,
  349,    0,   54,    0,    0,    0,    0,   54,  349,    0,
    0,  349,   54,  349,   54,   54,   54,   54,    0,    0,
    0,    0,   54,    0,    0,    0,   54,    0,    0,    0,
    0,    0,  349,    0,  349,    0,    0,    0,   54,    0,
  349,   54,  281,   54,  349,   54,    0,    0,   94,   95,
    0,   97,    0,    0,   98,  278,    0,  349,    0,  102,
  103,  104,    0,  106,   54,   54,   54,    0,    0,  107,
    0,   54,  109,    0,    0,    0,    0,    0,    0,  114,
    0,    0,    0,    0,  116,    0,  117,  118,  119,  349,
  562,    0,    0,    0,   54,    0,    0,  563,    0,    0,
  121,    0,  122,  123,    0,    0,  124,   54,    0,  126,
    0,  128,   54,  130,  131,  132,  279,   54,  135,   54,
   54,   54,   54,    0,    0,  564,    0,   54,  140,  141,
    0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   54,    0,    0,   54,    0,   54,    0,
    0,  143,  839,    0,  565,    0,    0,  145,  146,  147,
  148,    0,    0,    0,  149,    0,  150,    0,    0,   54,
   54,   54,  151,  152,  214,    0,    0,    0,    0,    0,
   94,   95,    0,   97,    0,    0,   98,  278,    0,    0,
    0,  102,  103,  104,    0,  106,    0,  153,  464,  155,
  156,  107,    0,   54,  109,   54,    0,    0,    0,    0,
    0,  114,    0,    0,    0,    0,  116,    0,  117,  118,
  119,    0,  562,    0,    0,    0,   54,    0,    0,  563,
    0,    0,  121,    0,  122,  123,    0,    0,  124,   54,
    0,  126,    0,  128,   54,  130,  131,  132,  279,   54,
  135,   54,   54,   54,   54,    0,    0,  564,    0,   54,
  140,  141,    0,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   54,    0,    0,   54,    0,
   54,    0,    0,  143,    0,    0,  565,    0,    0,  145,
  146,  147,  148,    0,    0,    0,  149,    0,  150,    0,
    0,   54,    0,    0,  151,  152,  315,    0,    0,    0,
    0,    0,   94,   95,    0,   97,    0,    0,   98,  278,
    0,    0,    0,  102,  103,  104,    0,  106,    0,  153,
  464,  155,  156,  107,    0,   59,  109,    0,    0,    0,
    0,    0,    0,  114,    0,    0,    0,    0,  116,    0,
  117,  118,  119,    0,  562,    0,    0,    0,   60,    0,
    0,  563,    0,    0,  121,    0,  122,  123,    0,    0,
  124,   61,    0,  126,    0,  128,   63,  130,  131,  132,
  279,   64,  135,   65,   66,   67,   68,    0,    0,  564,
    0,   69,  140,  141,    0,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   71,    0,    0,
   72,    0,   73,    0,    0,  143,    0,    0,    0,    0,
    0,  145,  146,  147,  148,    0,    0,    0,  149,    0,
  150,    0,    0,   74,    0,    0,  151,  152,    0,    0,
    0,    0,    0,    0,   94,   95,    0,   97,    0,    0,
   98,  278,    0,    0,    0,  102,  103,  104,    0,  106,
    0,  153,  464,  155,  156,  107,    0,    0,  109,    0,
    0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
  116,    0,  117,  118,  119,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  121,    0,  122,  123,
    0,    0,  124,    0,    0,  126,    0,  128,    0,  130,
  131,  132,  279,    0,  135,    0,    0,  137,    0,    0,
    0,  139,    0,    0,  140,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,    0,    0,  145,  146,  147,  148,    0,    0,    0,
  149,    0,  150,    0,    0,    0,    0,    0,  151,  152,
    0,    0,    0,    0,    0,    0,   94,   95,    0,   97,
    0,    0,   98,  278,    0,    0,    0,  102,  103,  104,
    0,  106,    0,  153,  323,  155,  156,  107,    0,    0,
  109,    0,    0,    0,    0,    0,    0,  114,    0,    0,
    0,    0,  116,    0,  117,  118,  119,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
  122,  123,    0,    0,  124,    0,    0,  126,    0,  128,
    0,  130,  131,  132,  279,    0,  135,    0,    0,    0,
    0,    0,    0,  139,    0,    0,  140,  141,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  804,    0,    0,  143,
    0,    0,    0,    0,    0,  145,  146,  147,  148,    0,
    0,    0,  149,    0,  150,    0,    0,    0,    0,    0,
  151,  152,    0,    0,    0,    0,    0,    0,   94,   95,
    0,   97,    0,    0,   98,  278,    0,    0,    0,  102,
  103,  104,    0,  106,    0,  153,  323,  155,  156,  107,
    0,    0,  109,    0,    0,    0,    0,    0,    0,  114,
    0,    0,    0,    0,  116,    0,  117,  118,  119,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  121,    0,  122,  123,    0,    0,  124,    0,    0,  126,
    0,  128,    0,  130,  131,  132,  279,    0,  135,    0,
    0,    0,    0,    0,    0,  139,    0,    0,  140,  141,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,  143,    0,    0,    0,    0,    0,  145,  146,  147,
  148,    0,    0,    0,  149,    0,  150,    0,    0,    0,
    0,    0,  151,  152,    0,    0,    0,    0,    0,    0,
   94,   95,    0,   97,    0,    0,   98,  278,    0,    0,
    0,  102,  103,  104,    0,  106,    0,  153,  323,  155,
  156,  107,    0,    0,  109,    0,    0,    0,    0,    0,
    0,  114,    0,    0,    0,    0,  116,    0,  117,  118,
  119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  121,    0,  122,  123,    0,    0,  124,    0,
    0,  126,    0,  128,    0,  130,  131,  132,  279,    0,
  135,    0,    0,    0,    0,    0,    0,  139,    0,    0,
  140,  141,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  500,
    0,    0,    0,  143,    0,    0,    0,    0,    0,  145,
  146,  147,  148,    0,    0,    0,  149,    0,  150,    0,
    0,    0,    0,    0,  151,  152,    0,    0,    0,    0,
    0,    0,   94,   95,    0,   97,    0,    0,   98,  278,
    0,    0,    0,  102,  103,  104,    0,  106,    0,  153,
  323,  155,  156,  107,    0,    0,  109,    0,    0,    0,
    0,    0,    0,  114,    0,    0,    0,    0,  116,    0,
  117,  118,  119,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  121,    0,  122,  123,    0,    0,
  124,    0,    0,  126,    0,  128,    0,  130,  131,  132,
  279,    0,  135,    0,    0,    0,    0,    0,    0,  139,
    0,    0,  140,  141,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  143,    0,    0,    0,    0,
    0,  145,  146,  147,  148,    0,    0,    0,  149,    0,
  150,    0,    0,    0,    0,    0,  151,  152,    0,    0,
    0,    0,    0,    0,   94,   95,    0,   97,    0,    0,
   98,  278,    0,    0,    0,  102,  103,  104,    0,  106,
    0,  153,  323,  155,  156,  107,    0,    0,  109,    0,
    0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
  116,    0,  117,  118,  119,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  121,    0,  122,  123,
    0,    0,  124,    0,    0,  126,    0,  128,    0,  130,
  131,  132,  279,    0,  135,    0,    0,    0,    0,    0,
    0,  139,    0,    0,  140,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,    0,    0,  145,  146,  147,  148,    0,    0,    0,
  149,    0,  150,    0,    0,    0,    0,    0,  151,  152,
    0,    0,    0,    0,    0,    0,   94,   95,    0,   97,
    0,    0,   98,  278,    0,    0,    0,  102,  103,  104,
    0,  106,    0,  153,  456,  155,  156,  107,    0,    0,
  109,    0,    0,    0,    0,    0,    0,  114,    0,    0,
    0,    0,  116,    0,  117,  118,  119,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
  122,  123,    0,    0,  124,    0,    0,  126,    0,  128,
    0,  130,  131,  132,  279,    0,  135,    0,    0,    0,
    0,    0,    0,  139,    0,    0,  140,  141,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
    0,    0,    0,    0,    0,  145,  146,  147,  148,    0,
    0,    0,  149,    0,  150,    0,    0,    0,    0,    0,
  151,  152,    0,    0,    0,    0,    0,    0,   82,   82,
    0,   82,    0,    0,   82,   82,    0,    0,    0,   82,
   82,   82,    0,   82,    0,  153,  464,  155,  156,   82,
    0,    0,   82,    0,    0,    0,    0,    0,    0,   82,
    0,    0,    0,    0,   82,    0,   82,   82,   82,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   82,    0,   82,   82,    0,    0,   82,    0,    0,   82,
    0,   82,    0,   82,   82,   82,   82,    0,   82,    0,
    0,    0,    0,    0,    0,   82,    0,    0,   82,   82,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   82,    0,    0,    0,    0,    0,   82,   82,   82,
   82,    0,    0,    0,   82,    0,   82,    0,    0,    0,
    0,    0,   82,   82,    0,    0,    0,    0,    0,    0,
  154,  154,    0,  154,    0,    0,  154,  154,    0,    0,
    0,  154,  154,  154,    0,  154,    0,   82,   82,   82,
   82,  154,    0,    0,  154,    0,    0,    0,    0,    0,
    0,  154,    0,    0,    0,    0,  154,    0,  154,  154,
  154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  154,    0,  154,  154,    0,    0,  154,    0,
    0,  154,    0,  154,    0,  154,  154,  154,  154,    0,
  154,    0,    0,    0,    0,    0,    0,  154,    0,    0,
  154,  154,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  154,    0,    0,    0,    0,    0,  154,
  154,  154,  154,    0,    0, 1238,  154,    0,  154,    0,
    0,    0,    0,    0,  154,  154,    0,    0,    0,    0,
    0,    0,   94,   95,    0,   97,    0,    0,   98,  278,
    0,    0,    0,  102,  103,  104,    0,  106,    0,  154,
  154,  154,  154,  107,    0,    0,  109, 1239,    0,    0,
    0,    0,    0,  114,    0,    0,    0,    0,  116,    0,
  117,  118,  119,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  121,    0,  122,  123,    0,    0,
  124,    0,    0,  126,    0,  128,    0,  130,  131,  132,
  279,    0,  135, 1240, 1241, 1242, 1243,    0, 1244, 1245,
 1246, 1247, 1248, 1249, 1250, 1251,    0,    0, 1252, 1253,
 1254, 1255, 1256, 1257, 1258, 1259,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  143,    0,    0,    0,    0,
    0,  145,  146,  147,  148,    0,    0,    0,  149,    0,
  150,    0,    0,    0,    0,    0,  151,  152,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  642,    0,  642,    0,
  642,  153,  280,  642,  156,  642,  642,    0,  642,    0,
  642,    0,  642,    0,  642,  642,  642,    0,    0,    0,
  642,  642,    0,    0,    0,    0,  642,    0,  642,  642,
    0,    0,    0,  642,    0,    0,    0,  642,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  642,  642,
    0,  642,    0,    0,    0,  642,  642,    0,    0,    0,
    0,    0,    0,  642,  642,   94,   95,  642,   97,    0,
  642,   98,  278,    0,    0,  642,  102,  103,  104,    0,
  106,    0,    0,    0,    0,    0,  107,    0,    0,  109,
    0,    0,    0,  642,  642,    0,  114,    0,    0,    0,
    0,  116,    0,  117,  118,  119,  642,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  121,    0,  122,
  123,    0,    0,  124,    0,    0,  126,    0,  128,    0,
  130,  131,  132,  279,  641,  135,  641,    0,  137,  641,
    0,  641,  641,    0,  641,    0,  641,  642,  641,    0,
  641,  641,  641,    0,    0,    0,  641,  641,    0,    0,
    0,    0,  641,    0,  641,  641,    0,    0,  143,  641,
    0,    0,    0,  641,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  641,    0,  641,    0,    0,
    0,  641,  641,    0,    0,    0,    0,    0,    0,  641,
  641,    0,    0,  641,    0,    0,  641,    0,    0,    0,
    0,  641,    0,    0,  153,  280,  641,    0,  641,    0,
    0,  641,    0,  641,  641,    0,  641,    0,  641,    0,
  641,    0,  641,  641,  641,    0,    0,    0,  641,  641,
    0,    0,  641,    0,  641,    0,  641,  641,    0,    0,
    0,  641,    0,    0,    0,  641,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  641,    0,  641,
    0,    0,    0,  641,  641,    0,    0,    0,    0,    0,
    0,  641,  641,  641,   95,  641,   97,    0,  641,   98,
    0,    0, 1165,  641,  102,    0,  248,    0,  106,    0,
  249, 1166, 1167,    0,    0,    0, 1168,  109,    0,    0,
    0,    0, 1169,    0,  114,    0,   95,    0,   97,  116,
    0,   98,    0,  119, 1165,    0,  102,    0,  248,    0,
  106,    0,  249, 1166, 1167,  121,    0,  122, 1168,  109,
    0,  124,    0,    0, 1169,    0,  114,    0,    0,  131,
  132,  116,    0,  135,    0,  119, 1170,    0,    0,    0,
    0, 1171,    0,    0,    0,  641,   54,  121,   54,  122,
    0,   54,    0,  124,    0,    0,   54,    0,    0,    0,
   54,  131,  132,    0,    0,  135,    0,    0, 1170,   54,
    0,    0, 1172, 1171,    0,    0,   54,    0,    0,    0,
    0,   54,    0,    0,    0,   54,   54,   54,   54,   54,
    0,   54,    0,    0,   54,    0,   54,   54,    0,   54,
   54,    0,    0,   54,    0,    0,   54,    0,    0,   54,
    0,   54,   54, 1173,    0,   54,   54,    0,   54,    0,
    0,   54,    0,    0,    0,   54,    0,   54,    0,   54,
    0,    0,    0,    0,   54,    0,    0,   54,    0,   54,
    0,    0,    0,   54,    0, 1173,   54,    0,    0,  171,
    0,   54,   54,    0,    0,   54,    0,    0,   54,   54,
    0,   54,    0,    0,   54,    0,    0,    0,    0,   54,
    0,    0,    0,   54,    0,    0,    0,    0,    0,    0,
    0,    0,   54,    0,    0,    0,    0,  171,    0,   54,
    0,   95,    0,   97,   54,   54,   98,    0,   54,    0,
   54,  102,   54,    0,    0,  106,    0,   54,    0,    0,
   54,    0,   54,    0,  109,    0,   54,    0,    0,   54,
    0,  114,    0,    0,   54,   54,  116,    0,   54,    0,
  119,   54,  543,    0,    0,   54,    0,    0,    0,  544,
    0,    0,  121,    0,  122,   95,    0,   97,  124,    0,
   98,  545, 1091,    0,    0,  102,  131,  132,    0,  106,
  135,    0,   95,  546,   97,    0,    0,   98,  109,    0,
    0,    0,  102,    0,    0,  114,  106,    0,    0,    0,
  116,    0, 1092,    0,  119,  109,    0,    0,    0,    0,
    0,    0,  114,    0,    0,    0,  121,  116,  122,    0,
    0,  119,  124, 1093,    0,    0,    0,    0,   54,    0,
  131,  132,    0,  121,  135,  122,   95,  255,   97,  124,
    0,   98,    0,    0,    0,    0,  102,  131,  132,    0,
  106,  135,    0,   95,  506,   97,    0,    0,   98,  109,
  547,    0,    0,  102,    0,    0,  114,  106,    0,    0,
    0,  116,    0,    0,    0,  119,  109,    0,    0,    0,
    0,    0,    0,  114,    0,    0,    0,  121,  116,  122,
    0,    0,  119,  124,    0,    0,    0,    0,    0,    0,
    0,  131,  132,    0,  121,  135,  122,   95,  255,   97,
  124,    0,   98,    0,   87,    0,    0,  102,  131,  132,
    0,  106,  135,    0,  500,  255,  500,    0,    0,  500,
  109,   87,    0,    0,  500,    0,    0,  114,  500,    0,
    0,    0,  116,    0,    0,    0,  119,  500,    0,    0,
    0,    0,    0,    0,  500,    0,    0,    0,  121,  500,
  122,    0,    0,  500,  124,    0,    0,    0,    0,    0,
    0,    0,  131,  132,    0,  500,  135,  500,  190,  546,
  190,  500,    0,  190,    0,  610,    0,    0,  190,  500,
  500,    0,  190,  500,    0,  200,  500,  200,    0,    0,
  200,  190,  612,    0,    0,  200,    0,    0,  190,  200,
    0,    0,    0,  190,    0,    0,    0,  190,  200,    0,
    0,    0,    0,    0,    0,  200,    0,    0,    0,  190,
  200,  190,    0,    0,  200,  190,    0,    0,    0,    0,
    0,    0,    0,  190,  190,    0,  200,  190,  200,  191,
  190,  191,  200,    0,  191,    0,   87,    0,    0,  191,
  200,  200,    0,  191,  200,    0,    0,  200,    0,    0,
    0,    0,  191,  500,    0,    0,    0,    0,    0,  191,
    0,    0,    0,    0,  191,    0,    0,    0,  191,    0,
    0,    0,   39,    0,    0,    0,    0,   39,    0,    0,
  191,    0,  191,    0,    0,    0,  191,    0,   39,    0,
    0,    0,    0,   39,  191,  191,    0,   39,  191,    0,
   39,  191,    0,    0,    0,    0,    0,  190,    0,    0,
    0,    0,   39,   39,    0,    0,    0,   39,   39,    0,
    0,    0,    0,   39,  200,   39,   39,   39,   39,    0,
    0,    0,    0,   39,    0,    0,    0,   39,    0,   39,
    0,    0,    0,   40,    0,    0,    0,    0,   40,   39,
    0,   39,   39,    0,   39,    0,    0,    0,   39,   40,
    0,    0,    0,    0,   40,    0,    0,    0,   40,    0,
    0,   40,    0,    0,    0,   39,    0,    0,  191,    0,
   39,   39,    0,   40,   40,    0,    0,    0,   40,   40,
    0,    0,    0,    0,   40,    0,   40,   40,   40,   40,
    0,    0,    0,    0,   40,    0,    0,    0,   40,    0,
   40,    0,    0,    0,   37,    0,    0,    0,    0,   37,
   40,    0,   40,   40,    0,   40,    0,    0,    0,   40,
   37,    0,    0,    0,    0,   37,    0,    0,    0,   37,
    0,    0,   37,    0,    0,    0,   40,    0,    0,    0,
    0,   40,   40,    0,   37,   37,    0,    0,    0,   37,
   37,    0,    0,    0,    0,   37,    0,   37,   37,   37,
   37,    0,    0,    0,    0,   37,    0,    0,    0,   37,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
   38,   37,    0,    0,   37,    0,   37,    0,    0,    0,
   37,   38,    0,    0,    0,    0,   38,    0,    0,    0,
   38,    0,    0,   38,    0,    0,    0,   37,    0,    0,
    0,    0,   37,   37,    0,   38,   38,    0,    0,    0,
   38,   38,    0,    0,    0,    0,   38,    0,   38,   38,
   38,   38,    0,    0,    0,    0,   38,    0,    0,   30,
   38,    0,   38,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,   38,    0,   38,    0,    0,
    0,   38,   30,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   30,    0,    0,   38,    0,
   30,    0,    0,   38,   38,   30,    0,   30,   30,   30,
   30,    0,    0,   30,    0,   30,    0,    0,    0,   30,
    0,    0,    0,    0,   54,    0,    0,    0,    0,    0,
    0,   30,    0,    0,   30,   54,   30,    0,    0,    0,
   54,    0,    0,    0,   54,    0,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   30,    0,   54,
   54,    0,   30,   30,   54,   54,    0,    0,    0,    0,
   54,    0,   54,   54,   54,   54,    0,    0,    0,    0,
   54,    0,    0,    0,   54,    0,   54,    0,    0,    0,
    0,    0,    0,   54,    0,    0,   54,    0,    0,   54,
    0,   54,    0,    0,   54,   54,    0,    0,    0,   54,
    0,    0,    0,   54,    0,    0,   54,    0,    0,    0,
    0,    0,   54,    0,    0,    0,    0,   41,   54,   54,
    0,    0,    0,   54,   54,    0,    0,    0,    0,   54,
    0,   54,   54,   54,   54,    0,    0,    0,    0,   54,
    0,    0,   54,   54,   54,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   54,    0,    0,   54,    0,
   54,    0,    0,    0,   54,   54,    0,    0,    0,    0,
    0,    0,   59,    0,    0,    0,    0,    0,   54,    0,
    0,   54,    0,   54,    0,    0,   42,    0,   54,    0,
   54,   54,   54,   54,    0,   60,   54,    0,   54,    0,
    0,    0,   54,    0,    0,    0,    0,    0,   61,    0,
    0,    0,   62,   63,   54,    0,    0,   54,   64,   54,
   65,   66,   67,   68,    0,    0,    0,    0,   69,    0,
    0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
   54,    0,    0,    0,   71,    0,    0,   72,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,
  };
  protected static readonly short [] yyCheck = {            76,
    0,   50,   50,    8,   50,   50,  319,  497,  345,  504,
   10,  312,   88,  321,  236,   28,  221,  248,  100,   50,
   85,  205,  623,  532,    3,  249,    5,  478,  268,  100,
  317,  137,  272,  542,  340,  844,  500,  549,    0,    0,
  127,   10,  952,  953,  256,   81,   10, 1015,   53,   10,
  256,   51,  256,   99,  160,  260,  268,  163,  256, 1098,
  256,    3,  256,    5,  256,   44,  256,  257,  256,  100,
   50,  120,  335,  646,  105, 1114,  282,  100,  127,   50,
  256,  256,   51,  129,  256,  256,  268,  133,  256,  154,
   51,   50,   50,   50,  143,   50,  865,  294,   50,   50,
   79,   50,   44, 1077,  140,  141,   50,   50,  314,  306,
   89,  268,  349,  350,  761,  320,  368,  322,  325,  276,
  156,  294,  145,  146,  147,  148,  149,  150,  151,  152,
  361,  256,  372,  268, 1044,  256,  368,   79,  370,   81,
  256,  667,  668,  364,  256,  335,  357,   89,  263,  335,
  256, 1125,  370, 1127,  341,  261,  205,  205,  369,  205,
  205,  424,  387,  256,  364,  363,  294,  365,  358,  367,
  369,  382,  424,  372,  205,  365,  256,  294,  365,  669,
  806,  377,  708, 1157,  710,  410,  294,  424,  263,  257,
  503,  817,  424,  414,  412,  532,  364,  262,  140,  141,
  315,  377,  370,  294,  266,  542,  418,  414,  414,  782,
  414,  784,  256,  437,  156,  280,  863,  414,  416,  268,
  414,  419,  414,  272,  424,  205,  414,  309,  277,  364,
  420,  421,  422,  339,  205,  317,  418,  237,  309,  414,
  315,  414,  414,  414,  365,  370,  205,  205,  205,  285,
  205,  363,  314,  205,  205,  371,  205,  414,  323,  387,
  372,  205,  205,  312,  256,  336,  315,  316,  237,  356,
  387,  783,  365,  237, 1313,  311,  237,  365,  309,  387,
  329,  343,  410,  418,  364,  334,  309,  336,  519,  335,
  370,  340,  328,  410,  317,  257,  387,  345,  363,  369,
  345, 1340,  410,  609,  364,  336,  248,  356,  256,  371,
  257,  256,  802, 1352,  345, 1354,  256,  257,  549,  410,
 1342, 1343,  366,  372,  373,  387,  370,  262,  377,  378,
  379,  380,  381,  382,  383,  384,  385,  386,  387, 1307,
  349,  350,  256,  285,  795,  825,  896,  811,  410,  655,
  372,  256,  370,  376,  364,  391,  392,  372,  357, 1168,
  409,  423,  365,  298,  424,  388,  389,  390,  364,  311,
  393,  394,  160,  365,  924,  163, 1398,  903,  343,  321,
  364,  417,  418,  382,  671,  372,  328,  335,  414,  349,
  350,  456,  364,  367,  412,  335,  341,  637,  463,  464,
  640,  264,  424,  414,  628,  895,  630,  478,  632,  424,
  358,  414,  377,  449,  424,  424,  966,  365,  358,  361,
  365,  269,  387,  488,  103,  365,  364,  473,  424,  108,
  414,  110,  111,  256,  113,  256,  115,  343,  286,  374,
  375,  921,  416,  923,  123,  410,  125,  478,  497,  391,
  392,  365,  424,  502,  133,  504, 1225,  136,  423,  138,
  365,  256,  325, 1373,  424,  371,  370,  780,  343,  515,
  516, 1072,  365,  261,  368,  417,  418,  526, 1077,  528,
 1390,  387,  305,  162,  532,  339,  424,  532,  794,  368,
  344,  556,  346,  558,  542,  541,  727,  542,  352,  353,
 1026,  532,  686,  743,  410, 1274, 1275,  449, 1277,  368,
  305,  542,  387,  562,  563,  368,  967,  423,  414, 1288,
 1127,  414, 1291, 1292, 1077, 1077, 1125, 1128, 1127,  371,
  424,  554, 1058, 1059,  277,  410,  844, 1306,  281, 1065,
  519,  368,  363,  370,  365,  424,  367,  368,  423,  370,
 1157,  372,  783, 1062,  339,  414,  941,  272, 1157,  344,
  609,  346,  272,  339,  349,  350,  615,  352,  353,  414,
  424,  424, 1125, 1125, 1127, 1127,  365,  519, 1179,  363,
  369,  296, 1183,  367,  377,  370,  296,  363,  637,  671,
  626,  640,  410,  414,  387,  416,  702,  424,  419,  342,
  279,  914,  281,  679, 1157, 1157,  655,  549,  323,  410,
  815, 1077,  997,  323,  339,  664,  681,  410,  372,  344,
  669,  346,  423,   50,  349,  350,  363,  352,  353,  363,
  419,  680,  416,  339,  647,  372,  667,  668,  344,  424,
  346,  320, 1077,  349,  350,  370,  352,  353,  671,  366,
 1077,  339,  698,  332,   81, 1076, 1077,  339,  387, 1125,
  696, 1127,  344,  712,  346,  714,  367,  349,  350,  410,
  352,  353,  973,  100,  723,  363,  414,  708,  105,  710,
 1101,  410,  423,  369,  626,  423,  372,  272,  417,  738,
 1125, 1157, 1127, 1030,  743,  744,  256,  746, 1125,  424,
 1127,  363, 1015,  365, 1125,  265, 1127,  267,  757,  758,
  270,  296,  357,  140,  141,  275,  938, 1018,  424,  279,
  365,  256, 1157,  414,  369, 1062,  775,  776,  288,  156,
 1157,  780,  423,  377,  269,  295, 1157,  382,  323, 1077,
  300,  372,  424,  387,  304,  794, 1083,  357,  797,  397,
  786,  286,  294,  802,  696, 1056,  316,  806,  318,  369,
  825,  409,  322,  372,  306,  765,  410,  816,  339,  414,
  330,  331,  382,  344,  334,  346,  306,  337,  205,  423,
  366,  352,  353,  313,  370,  727,  339, 1125, 1089, 1127,
   10,  344,   12,  346,  367,  474,  349,  350,  363,  352,
  353,  261,  851,  387,  853, 1295,  855,  372,  378,  379,
  339,  145,  146,  147,  148,  149,  150,  151,  152, 1157,
  357,  248,  392,  393,  284,  368,  410,  370,  365,  372,
  382,  368,  369,  370,  363,   55,  515,  297,   58,  423,
  414,  783,  302,  372,  786,  382,  895,  307,  376,  309,
  310,  311,  312,  424,  414,  315,  921,  317,  285,  864,
 1168,  321,  256,  343,  375,  393,  394, 1357,  365,  385,
  366,  424,  903,  333,  370,  380,  336,  414,  338,  925,
  377,  357,  309,  932,  311,  934,  357,  936,  370,  365,
  372,  371,  368,  369,  321,  377,  366,  377,  369,  359,
  370,  328,  844, 1393,  364, 1136,  382,  387,  306,  336,
  308,  382, 1143,  363,  363,  313,  272,  363,  345, 1414,
 1415,  277,  372,  372,  973,  281,  372,  325,  381,  363,
  410,  396,  306,  363,  361,  940,  985,  986,  372,  313,
  296,  941,  372,  423,  993,  339,  368,  947,  370,  949,
  344,  325,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  386,  391,  392, 1015,  323,  365, 1018,
  364,  368,  366,  410,  368,  364,  370,  371,  372,  366,
  417,  370, 1030,  370,  365, 1030,  342, 1036,  377,  366,
  417,  418,  386,  370, 1307, 1026,  368,  997,  370, 1030,
  366,  367,  396,  397,  370,  366,  368, 1056,  950,  370,
  372,  339,  390,  391, 1062,  409,  344, 1062,  346, 1068,
 1069,  414,  449, 1190,  352,  353,  369, 1058, 1059, 1196,
  424, 1062,  354,  355, 1065, 1083, 1203,  366, 1083, 1075,
 1089,  368,  376,  370,  414,  366,  367, 1047,  369,  370,
  371,  478, 1083,  256,  388,  389,  390,  394,  395,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  414, 1076, 1077,  354,  355,
  363, 1130,  414,  368,  367,  370,  369,  370,  370,  372,
  372,  340,  519, 1139,  377,  382,  383,  384,  261, 1135,
  368, 1101,  370,  363,  372,  532, 1048,  367,  372,  369,
  370,  372,  372, 1162,  369,  542,    0,  377,  370,  256,
  372,  284,  549,  360,  361, 1125, 1203, 1127,  411, 1165,
 1166,  410,  411, 1075,  297, 1200,  366,  363,  368,  302,
  370,  349,  350,  367,  307,  369,  309,  310,  311,  312,
 1215,  411,  414,  366,  317,  368, 1192, 1157,  321, 1195,
  372,  366, 1208,  368,  388,  389,  500, 1232,  372, 1234,
  333,  414,  363,  336,  372,  338,  367,  371,  369,  370,
  366,  372,  368,  366,  408,  368,  377,  370,  397,  398,
  399,  400,  416, 1135, 1136,  419,  359,  368,  366,  626,
  368, 1143,  339,  370,  366,  372,  368,  344,  414,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  554,  368,  369, 1165, 1166,  414, 1168,  364,  370,  366,
  372,  368, 1174,  370,  371,  372,  370,  370,  372,  372,
  667,  668,  360,  361,  381,  414, 1295, 1293, 1190,  386,
 1192,  414,  363, 1195, 1196,  872,  873,  256, 1307,  396,
  397, 1203,  401,  402,    0,  256,  339,  395,  396,  696,
  368,  368,  409,  261,  414, 1324,  372,  368,  368,  364,
  294,  708,  370,  710,  368, 1285,  364,  424,  368,  367,
  363,  369,  370,  368,  367,  414,  284,  370,  371,  372,
  727,  368, 1302,  368,  377,  294,  372,  414, 1357,  297,
  388,  389,  370,  368,  302, 1315, 1316,  305,  367,  307,
  256,  309,  310,  311,  312,  370,  377,  371,  414,  317,
  408,  414,    0,  321,  356,  372,  367,  325,  416,  411,
  368,  419, 1342, 1343, 1393,  333,  370,  377,  336,  370,
  338,  370,  414, 1399, 1400,  372,  783,  370,  370,  786,
 1406, 1407,  294,  424,  368, 1414, 1415,  419,  363,  369,
  368,  359,  256,  257,  414,  414,  343,  370,  294,  294,
  264,  265,  266,  267,  268,  370,  270,  271,  414,  273,
  274,  275,  276,  277,  278,  279,  280,  358, 1398,  363,
  370,  285,  256,  287,  288,  289,  290,  291,  292,  256,
  368,  295,  377,  368,  280,  299,  300,  844,  302,  303,
  304,  364,  256,  363,  414,  372,  414,  414,  414,  371,
  314,  414,  316,  414,  318,  319,  370,  372,  322,  370,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  372,  337,  372,    0,  340,  341,  368,  366,
  344,  345,  364,  368,  417,  367,  377,  369,  370,  419,
  347,  351,  368,  414,  339,  256,  903,  811,  377,  363,
  364,  256,  377,  367,  347,  368,  388,  389,  372,  373,
  374,  375,  376,  364,  368,  370,  380,  364,  382,  371,
  414,  370,  370,  363,  388,  389,  408,  366,  414,  366,
  368,  364,  363,  363,  416,  371,  348,  419,  363,  348,
  372,  257,  377,  950,  367,  261,  370,  364,  377,  413,
  414,  415,  416,  364,  418,  368,  272,  364,  364,  356,
  424,  277,  337,  305,  414,  281,  367,  367,  284,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  365,
  296,  297,  363,  367,  372,  301,  302,  367,  414,  367,
  367,  307,  414,  309,  310,  311,  312,  369,  414,  414,
  367,  317,  367,  377,  414,  321,  363,  323,  256,  257,
  368,  377,  365,  261,  368,  256,  414,  333,  370, 1026,
  336,  369,  338, 1030,  272,  369,  342,  370,  377,  277,
  370,  370,  368,  281,  372,  368,  284,  366,  414,    0,
  372, 1048,  372,  359,  414,  368,  414,  372,  296,  297,
  368, 1058, 1059,  301,  302, 1062,  368,  363, 1065,  307,
  368,  309,  310,  311,  312,  364,  377,  364, 1075,  317,
  366,  315,  263,  321,  367,  323, 1083,  367,  364,  368,
  368,    0,  366,  363,  366,  333,  414,  335,  336,  372,
  338,  372,  363,  368,  342,  364,  363,  414,  372,  414,
  364,  364,  368,  368,  372,  364,  368,  368,  364,  414,
  358,  359,  372,  368,  372,  372,  364,  365,  372,  364,
  363,  368,  364,  372,  364,  364,  363,  315, 1135, 1136,
  368,  256,  257,    0,  369,  263, 1143,   51,  372,  264,
  265,  266,  267,  268,  372,  270,  271,  372,  273,  274,
  275,  276,  277,  278,  279,  372,  372,  372, 1165, 1166,
  285, 1168,  287,  288,  289,  290,  291,  292,  372,  372,
  295,  864,   44,   89,  299,  300,  637,  302,  303,  304,
 1101,  637, 1157, 1310, 1347, 1192,  248, 1363, 1195,  314,
 1327,  316, 1298,  318,  319, 1293,  782,  322, 1174,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  788,  337,    0,  788,  340,  341, 1113, 1190,  344,
  345, 1407, 1125, 1401,  788, 1320, 1316, 1315, 1400, 1047,
 1234, 1174,  947, 1048,  519,  811,  680,  738,  363,  364,
  743,  563,  367,  372,  640,  914,  403,  372,  373,  374,
  375,  376,  671,  404,  406,  380,    0,  382,  405,  407,
  727, 1011,  408,  388,  389, 1135,  925, 1083, 1030,  205,
  897,  976,  881,  967,  986,  978,  829,  849, 1188, 1069,
  425,  517,   -1,   -1,   -1,   -1,   -1,   -1,  413,  414,
  415,  416,   -1,  418,   -1,  256,  257,   -1,   -1,  424,
  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  335,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,  261,   -1,   -1,  358,  359,   -1,
   -1,   -1,   -1,  364,  365,  272,   -1,   -1,   -1,   -1,
  277,   -1,  373,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,  414,  321,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  257,  338,   -1,   -1,  261,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
  277,   -1,  359,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  359,  317,   -1,  256,   -1,  321,   -1,  323,
  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,  359,  297,  298,   -1,   -1,
   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,  359,   -1,
   -1,   -1,  363,  364,   -1,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,   -1,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
   -1,  412,   -1,  414,  256,  416,   -1,   -1,  419,  261,
  262,   -1,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,  359,   -1,   -1,
   -1,  363,  364,  365,  366,  367,  368,  369,  370,  371,
  372,   -1,  374,  375,   -1,   -1,  378,  379,  380,  381,
  382,   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,
  412,   -1,  414,   -1,  416,  256,   -1,  419,   -1,   -1,
   -1,   -1,  424,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  261,  262,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,  284,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,
   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,  413,  414,  415,  416,  317,   -1,   -1,   -1,
  321,   -1,   -1,  424,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,  359,   -1,
   -1,   -1,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,   -1,  374,  375,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  409,   -1,
   -1,  412,   -1,  414,   -1,  416,   -1,   -1,  419,   -1,
   -1,   -1,   -1,  424,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,  256,  336,   -1,  338,
  339,   -1,  262,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
  359,   -1,   -1,   -1,  363,  364,  365,  366,  367,  368,
   -1,  370,  371,  372,   -1,  374,  375,   -1,  298,  378,
  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  409,   -1,   -1,  412,   -1,  414,   -1,  416,   -1,  339,
  419,   -1,   -1,   -1,  344,  424,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,  364,  365,  366,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,   -1,  377,  378,  379,
  380,  381,  382,  383,  384,  385,  386,  261,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  284,   -1,  256,   -1,  414,   -1,  416,  261,  262,  419,
   -1,   -1,   -1,  297,  424,   -1,   -1,   -1,  302,   -1,
   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,
  284,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  294,  325,   -1,  297,  298,   -1,   -1,   -1,  302,  333,
   -1,  305,  336,  307,  338,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,  359,   -1,   -1,   -1,  333,
   -1,  256,  336,   -1,  338,  339,   -1,  262,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,  359,   -1,   -1,   -1,  363,
  364,   -1,  366,  367,  368,   -1,  370,  371,  372,   -1,
  374,  375,   -1,  298,  378,  379,  380,  381,   -1,   -1,
  414,  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,  412,   -1,
  414,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  424,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  372,   -1,  374,
  375,   -1,  377,  378,  379,  380,  381,  382,  383,  384,
  385,  386,   -1,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,   -1,  256,  256,   -1,   -1,
   -1,  416,  262,   -1,   -1,   -1,  265,   -1,  267,  424,
   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,  363,  364,   -1,  366,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,   -1,  377,  378,  379,
  380,  381,  382,  383,  384,  385,  386,   -1,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
   -1,  256,  256,   -1,   -1,  414,  416,  262,   -1,  419,
   -1,  265,   -1,  267,  424,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,
   -1,  366,  367,  368,  369,  370,  371,  372,   -1,  374,
  375,   -1,  377,  378,  379,  380,  381,  382,  383,  384,
  385,  386,   -1,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,   -1,  256,  256,   -1,   -1,
  414,  416,  262,   -1,  419,   -1,  265,   -1,  267,  424,
   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,  366,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,   -1,  377,  378,  379,
  380,  381,  382,  383,  384,  385,  386,   -1,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
   -1,  256,  256,   -1,   -1,  414,  416,  262,   -1,  419,
   -1,  265,   -1,  267,  424,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,
   -1,  366,  367,  368,  369,  370,  371,  372,   -1,  374,
  256,   -1,  377,  378,  379,  380,  381,  382,  383,  384,
  385,  386,   -1,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,   -1,  256,   -1,   -1,   -1,
  414,  416,  262,   -1,  419,   -1,   -1,   -1,   -1,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,  339,
   -1,   -1,   -1,  256,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,  374,  375,   -1,  377,  378,  379,
  380,  381,  382,  383,  384,  385,  386,   -1,  424,   -1,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  256,  409,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  424,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,  294,   -1,   -1,   -1,
  298,  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  386,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  339,   -1,  262,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,  424,   -1,   -1,   -1,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,  294,  374,  375,   -1,  298,
  378,  379,  380,  381,  382,   -1,   -1,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,  412,   -1,  414,   -1,  416,   -1,
  339,  419,   -1,   -1,   -1,  344,  424,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
  256,   -1,   -1,   -1,  363,  364,  262,  366,  367,  368,
   -1,  370,  371,  372,   -1,  374,  375,   -1,   -1,  378,
  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,   -1,
   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  409,   -1,   -1,  412,   -1,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  424,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,  298,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,  374,  375,
   -1,   -1,  378,  379,  380,  381,  382,  383,  384,  385,
  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,   -1,  256,   -1,   -1,   -1,  339,   -1,  262,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,  374,  375,   -1,  298,  378,  379,  380,  381,
   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  409,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  424,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,  298,
   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,
   -1,  374,  375,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,   -1,  256,   -1,   -1,   -1,
  339,   -1,  262,   -1,   -1,  344,  409,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,
   -1,  370,  371,  372,   -1,  374,  375,   -1,  298,  378,
  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,   -1,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  424,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,  374,  375,   -1,   -1,  378,  379,
  380,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
  390,  391,  392,  393,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,   -1,   -1,  256,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,  378,  379,  380,  381,   -1,   -1,
  256,  385,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,
  380,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,  378,  379,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  256,   -1,   -1,  424,   -1,
   -1,  262,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,   -1,  298,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,  256,   -1,   -1,   -1,
  378,  379,  380,  381,   -1,   -1,   -1,  385,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,  364,   -1,   -1,  367,   -1,  369,  370,
   -1,  409,   -1,  374,  375,   -1,   -1,  378,  379,  380,
  381,  382,  383,  384,  385,  386,  424,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,  408,  409,   -1,
   -1,   -1,   -1,   -1,   -1,  416,   -1,   -1,  419,  339,
   -1,   -1,   -1,  424,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  380,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  380,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,
   -1,   -1,  256,  385,  386,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  380,  381,   -1,   -1,  256,  385,  386,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,   -1,   -1,
  256,  385,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  381,   -1,   -1,  256,  385,  386,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  256,  385,
  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  409,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  424,   -1,
   -1,   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
   -1,   -1,  256,   -1,  386,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  409,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  424,   -1,   -1,   -1,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  386,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  409,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,  424,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,   -1,   -1,   -1,   -1,  262,  339,
   -1,   -1,   -1,   -1,  344,  409,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  424,   -1,   -1,   -1,  364,   -1,  366,   -1,  368,   -1,
  370,  371,  372,   -1,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  386,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,  397,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  409,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,   -1,   -1,   -1,  424,   -1,   -1,  298,  364,   -1,
  366,   -1,  368,  357,  370,  371,  372,   -1,   -1,   -1,
   -1,  365,   -1,  367,   -1,  369,   -1,   -1,  372,   -1,
  374,  375,   -1,  377,  378,  379,  380,  381,  382,  383,
  384,  385,  386,   -1,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,   -1,   -1,  424,   -1,
  414,   -1,  416,   -1,  365,  419,  367,  368,  369,  370,
  424,  372,   -1,  374,  375,  262,  377,  378,  379,  380,
  381,   -1,  383,  384,  385,  386,  261,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  284,
   -1,  298,   -1,  414,   -1,  416,   -1,   -1,  419,   -1,
   -1,   -1,  297,  424,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
  367,  368,  369,  370,  359,  360,  361,  374,  375,  364,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  256,   -1,   -1,   -1,  416,
   -1,   -1,  419,  264,  265,  266,  267,  424,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,  372,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  413,  414,  415,  416,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  413,  414,  415,  416,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,   -1,  372,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  414,
  415,  416,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
  372,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  413,  414,  415,  416,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,   -1,  372,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  413,  414,  415,  416,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  414,  415,
  416,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  414,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  261,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,  320,   -1,  322,
  297,   -1,  325,   -1,  327,  302,  329,  330,  331,  332,
  307,  334,  309,  310,  311,  312,   -1,   -1,  341,   -1,
  317,  344,  345,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  363,  338,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,  359,   -1,   -1,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  413,  414,  415,  416,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  414,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  413,  414,  415,  416,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  413,  414,  415,  416,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  414,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,
  414,  415,  416,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  414,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  413,  414,  415,  416,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  414,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,  367,   -1,
   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,
  389,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,
  261,  288,  263,   -1,  423,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,  297,   -1,  325,   -1,
  327,  302,  329,  330,  331,  332,  307,  334,  309,  310,
  311,  312,   -1,   -1,  341,   -1,  317,  344,  345,   -1,
  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,  363,  338,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,  359,   -1,
   -1,  388,  389,  364,  365,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  413,  414,  415,  416,
   -1,  264,  265,   -1,  267,   -1,  423,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  298,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,  369,  370,   -1,   -1,
   -1,  374,  375,   -1,   -1,  378,  379,  380,  381,  382,
  383,  384,  385,  386,  367,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,   -1,   -1,   -1,
   -1,   -1,   -1,  416,   -1,   -1,  419,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,  263,   -1,  265,   -1,  267,
  413,  414,  270,   -1,  272,  273,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,  294,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,   -1,  373,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,  414,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
  265,   -1,  267,  342,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
  359,   -1,  287,  288,   -1,  364,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,  373,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,  414,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,  359,   -1,  287,  288,   -1,  364,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,  373,  300,
   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  261,  336,  337,  338,  265,  414,
  267,  342,   -1,  270,   -1,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,  284,  359,   -1,
  287,  288,   -1,  364,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,  373,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,  261,  336,
  337,  338,  265,  414,  267,  342,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,  359,   -1,  287,  288,   -1,  364,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,  373,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,  414,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,  359,   -1,  287,  288,
   -1,  364,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,  261,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,  284,
   -1,  330,  331,   -1,  333,  334,  261,  336,  337,  338,
   -1,  414,  297,  342,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,
  359,   -1,  317,   -1,   -1,  364,  321,   -1,   -1,   -1,
  325,   -1,  297,   -1,   -1,   -1,   -1,  302,  333,   -1,
   -1,  336,  307,  338,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,  357,   -1,  359,   -1,   -1,   -1,  333,   -1,
  365,  336,  367,  338,  369,  414,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,  382,   -1,  275,
  276,  277,   -1,  279,  359,  360,  361,   -1,   -1,  285,
   -1,  261,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  414,
  306,   -1,   -1,   -1,  284,   -1,   -1,  313,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,  297,   -1,  325,
   -1,  327,  302,  329,  330,  331,  332,  307,  334,  309,
  310,  311,  312,   -1,   -1,  341,   -1,  317,  344,  345,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
   -1,  367,  368,   -1,  370,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,  359,
  360,  361,  388,  389,  364,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,  415,
  416,  285,   -1,  261,  288,  263,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,  306,   -1,   -1,   -1,  284,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,  297,
   -1,  325,   -1,  327,  302,  329,  330,  331,  332,  307,
  334,  309,  310,  311,  312,   -1,   -1,  341,   -1,  317,
  344,  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,  367,   -1,   -1,  370,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,  359,   -1,   -1,  388,  389,  364,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,
  414,  415,  416,  285,   -1,  261,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,  306,   -1,   -1,   -1,  284,   -1,
   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,  297,   -1,  325,   -1,  327,  302,  329,  330,  331,
  332,  307,  334,  309,  310,  311,  312,   -1,   -1,  341,
   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,  359,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  413,  414,  415,  416,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  413,  414,  415,  416,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,  415,
  416,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,
  414,  415,  416,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  413,  414,  415,  416,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  413,  414,  415,  416,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  413,  414,  415,  416,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  413,  414,  415,
  416,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,  285,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  413,
  414,  415,  416,  285,   -1,   -1,  288,  327,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,  373,  374,  375,  376,   -1,  378,  379,
  380,  381,  382,  383,  384,  385,   -1,   -1,  388,  389,
  390,  391,  392,  393,  394,  395,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  263,   -1,  265,   -1,
  267,  413,  414,  270,  416,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,  264,  265,  334,  267,   -1,
  337,  270,  271,   -1,   -1,  342,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,  360,  361,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  373,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  265,  334,  267,   -1,  337,  270,
   -1,  272,  273,   -1,  275,   -1,  277,  414,  279,   -1,
  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,   -1,   -1,  367,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  413,  414,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,   -1,   -1,   -1,  287,  288,
   -1,   -1,  373,   -1,  293,   -1,  295,  296,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  414,  265,  334,  267,   -1,  337,  270,
   -1,   -1,  273,  342,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,   -1,  265,   -1,  267,  300,
   -1,  270,   -1,  304,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  316,   -1,  318,  287,  288,
   -1,  322,   -1,   -1,  293,   -1,  295,   -1,   -1,  330,
  331,  300,   -1,  334,   -1,  304,  337,   -1,   -1,   -1,
   -1,  342,   -1,   -1,   -1,  414,  265,  316,  267,  318,
   -1,  270,   -1,  322,   -1,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
   -1,   -1,  373,  342,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
   -1,  270,   -1,   -1,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,  288,
   -1,  330,  331,  414,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,  414,  325,   -1,   -1,  368,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  265,
   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  366,   -1,  295,
   -1,  265,   -1,  267,  300,  414,  270,   -1,  304,   -1,
  306,  275,  308,   -1,   -1,  279,   -1,  313,   -1,   -1,
  316,   -1,  318,   -1,  288,   -1,  322,   -1,   -1,  325,
   -1,  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,
  304,  337,  306,   -1,   -1,  414,   -1,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  265,   -1,  267,  322,   -1,
  270,  325,  272,   -1,   -1,  275,  330,  331,   -1,  279,
  334,   -1,  265,  337,  267,   -1,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,   -1,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,   -1,
   -1,  304,  322,  323,   -1,   -1,   -1,   -1,  414,   -1,
  330,  331,   -1,  316,  334,  318,  265,  337,  267,  322,
   -1,  270,   -1,   -1,   -1,   -1,  275,  330,  331,   -1,
  279,  334,   -1,  265,  337,  267,   -1,   -1,  270,  288,
  414,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
   -1,   -1,  304,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  316,  334,  318,  265,  337,  267,
  322,   -1,  270,   -1,  414,   -1,   -1,  275,  330,  331,
   -1,  279,  334,   -1,  265,  337,  267,   -1,   -1,  270,
  288,  414,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,   -1,   -1,  304,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  316,  334,  318,  265,  337,
  267,  322,   -1,  270,   -1,  414,   -1,   -1,  275,  330,
  331,   -1,  279,  334,   -1,  265,  337,  267,   -1,   -1,
  270,  288,  414,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,   -1,   -1,  304,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  316,  334,  318,  265,
  337,  267,  322,   -1,  270,   -1,  414,   -1,   -1,  275,
  330,  331,   -1,  279,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  288,  414,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,  261,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,  272,   -1,
   -1,   -1,   -1,  277,  330,  331,   -1,  281,  334,   -1,
  284,  337,   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,
   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,  414,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  261,  333,
   -1,  335,  336,   -1,  338,   -1,   -1,   -1,  342,  272,
   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,  359,   -1,   -1,  414,   -1,
  364,  365,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
  323,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  261,
  333,   -1,  335,  336,   -1,  338,   -1,   -1,   -1,  342,
  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,   -1,   -1,  359,   -1,   -1,   -1,
   -1,  364,  365,   -1,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,  323,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  261,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,
  342,  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,
  281,   -1,   -1,  284,   -1,   -1,   -1,  359,   -1,   -1,
   -1,   -1,  364,  365,   -1,  296,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,  261,
  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,
   -1,  342,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,  359,   -1,
  302,   -1,   -1,  364,  365,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,  272,  338,   -1,   -1,   -1,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,   -1,  296,
  297,   -1,  364,  365,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,   -1,   -1,  272,  342,   -1,   -1,   -1,  277,
   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  359,   -1,   -1,   -1,   -1,  364,  296,  297,
   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  261,  321,  263,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,  342,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,  359,   -1,  302,   -1,   -1,  364,   -1,  307,   -1,
  309,  310,  311,  312,   -1,  284,  315,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,  301,  302,  333,   -1,   -1,  336,  307,  338,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,
  };

#line 6030 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	Report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	Report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
	ubag.PushTypeDeclaration (tc);
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;
	ubag.PopTypeDeclaration ();
	
	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file, ModuleContainer module)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	this.module = module;
	this.compiler = module.Compiler;
	current_namespace = new NamespaceEntry (module, null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, compiler);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			Report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				Report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		Report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		Report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int ASYNC = 359;
  public const int GET = 360;
  public const int SET = 361;
  public const int LAST_KEYWORD = 362;
  public const int OPEN_BRACE = 363;
  public const int CLOSE_BRACE = 364;
  public const int OPEN_BRACKET = 365;
  public const int CLOSE_BRACKET = 366;
  public const int OPEN_PARENS = 367;
  public const int CLOSE_PARENS = 368;
  public const int DOT = 369;
  public const int COMMA = 370;
  public const int COLON = 371;
  public const int SEMICOLON = 372;
  public const int TILDE = 373;
  public const int PLUS = 374;
  public const int MINUS = 375;
  public const int BANG = 376;
  public const int ASSIGN = 377;
  public const int OP_LT = 378;
  public const int OP_GT = 379;
  public const int BITWISE_AND = 380;
  public const int BITWISE_OR = 381;
  public const int STAR = 382;
  public const int PERCENT = 383;
  public const int DIV = 384;
  public const int CARRET = 385;
  public const int INTERR = 386;
  public const int DOUBLE_COLON = 387;
  public const int OP_INC = 388;
  public const int OP_DEC = 389;
  public const int OP_SHIFT_LEFT = 390;
  public const int OP_SHIFT_RIGHT = 391;
  public const int OP_LE = 392;
  public const int OP_GE = 393;
  public const int OP_EQ = 394;
  public const int OP_NE = 395;
  public const int OP_AND = 396;
  public const int OP_OR = 397;
  public const int OP_MULT_ASSIGN = 398;
  public const int OP_DIV_ASSIGN = 399;
  public const int OP_MOD_ASSIGN = 400;
  public const int OP_ADD_ASSIGN = 401;
  public const int OP_SUB_ASSIGN = 402;
  public const int OP_SHIFT_LEFT_ASSIGN = 403;
  public const int OP_SHIFT_RIGHT_ASSIGN = 404;
  public const int OP_AND_ASSIGN = 405;
  public const int OP_XOR_ASSIGN = 406;
  public const int OP_OR_ASSIGN = 407;
  public const int OP_PTR = 408;
  public const int OP_COALESCING = 409;
  public const int OP_GENERICS_LT = 410;
  public const int OP_GENERICS_LT_DECL = 411;
  public const int OP_GENERICS_GT = 412;
  public const int LITERAL = 413;
  public const int IDENTIFIER = 414;
  public const int OPEN_PARENS_LAMBDA = 415;
  public const int OPEN_PARENS_CAST = 416;
  public const int GENERIC_DIMENSION = 417;
  public const int DEFAULT_COLON = 418;
  public const int OPEN_BRACKET_EXPR = 419;
  public const int EVAL_STATEMENT_PARSER = 420;
  public const int EVAL_COMPILATION_UNIT_PARSER = 421;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 422;
  public const int GENERATE_COMPLETION = 423;
  public const int COMPLETE_COMPLETION = 424;
  public const int UMINUS = 425;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
